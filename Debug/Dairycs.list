
Dairycs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e10  08005e10  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005e10  08005e10  00006e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e18  08005e18  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e18  08005e18  00006e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005e20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000068  08005e88  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08005e88  000073e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010563  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f1  00000000  00000000  000175fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00019bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000baf  00000000  00000000  0001aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018975  00000000  00000000  0001b69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011424  00000000  00000000  00034014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b7c9  00000000  00000000  00045438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0c01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004684  00000000  00000000  000e0c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e52c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d50 	.word	0x08005d50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005d50 	.word	0x08005d50

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fce0 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f81e 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f982 	bl	80008c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005bc:	f000 f94a 	bl	8000854 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f91e 	bl	8000800 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80005c4:	f000 f8d4 	bl	8000770 <MX_TIM10_Init>
  MX_ADC1_Init();
 80005c8:	f000 f880 	bl	80006cc <MX_ADC1_Init>
  MX_TIM11_Init();
 80005cc:	f000 f8f4 	bl	80007b8 <MX_TIM11_Init>
//	  Error_Handler();
//  }
//  if (HAL_TIM_Base_Start_IT(&htim11) != HAL_OK){
//	  Error_Handler();
//  }
  if (HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, RX_BUFF_SIZE) != HAL_OK){
 80005d0:	2220      	movs	r2, #32
 80005d2:	4906      	ldr	r1, [pc, #24]	@ (80005ec <main+0x40>)
 80005d4:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <main+0x44>)
 80005d6:	f003 f994 	bl	8003902 <HAL_UARTEx_ReceiveToIdle_DMA>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <main+0x38>
	  Error_Handler();
 80005e0:	f000 f9f6 	bl	80009d0 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* this is the new system even loop */
	  main_system_loop();
 80005e4:	f004 faec 	bl	8004bc0 <main_system_loop>
  {
 80005e8:	bf00      	nop
 80005ea:	e7fb      	b.n	80005e4 <main+0x38>
 80005ec:	20000264 	.word	0x20000264
 80005f0:	200001bc 	.word	0x200001bc

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	@ 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fe10 	bl	8005228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	4a28      	ldr	r2, [pc, #160]	@ (80006c4 <SystemClock_Config+0xd0>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	@ 0x40
 8000628:	4b26      	ldr	r3, [pc, #152]	@ (80006c4 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000640:	4a21      	ldr	r2, [pc, #132]	@ (80006c8 <SystemClock_Config+0xd4>)
 8000642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000668:	2310      	movs	r3, #16
 800066a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800066c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000672:	2304      	movs	r3, #4
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f938 	bl	80028f4 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068a:	f000 f9a1 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fb9a 	bl	8002de4 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006b6:	f000 f98b 	bl	80009d0 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	@ 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006de:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <MX_ADC1_Init+0x9c>)
 80006e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_ADC1_Init+0x98>)
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <MX_ADC1_Init+0xa0>)
 8000710:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000720:	2201      	movs	r2, #1
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000728:	2201      	movs	r2, #1
 800072a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	480d      	ldr	r0, [pc, #52]	@ (8000764 <MX_ADC1_Init+0x98>)
 800072e:	f000 fc93 	bl	8001058 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 f94a 	bl	80009d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_ADC1_Init+0x98>)
 800074e:	f000 ff43 	bl	80015d8 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000758:	f000 f93a 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000084 	.word	0x20000084
 8000768:	40012000 	.word	0x40012000
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000774:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_TIM10_Init+0x40>)
 8000776:	4a0f      	ldr	r2, [pc, #60]	@ (80007b4 <MX_TIM10_Init+0x44>)
 8000778:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_TIM10_Init+0x40>)
 800077c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000780:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_TIM10_Init+0x40>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_TIM10_Init+0x40>)
 800078a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800078e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_TIM10_Init+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_TIM10_Init+0x40>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_TIM10_Init+0x40>)
 800079e:	f002 fd41 	bl	8003224 <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80007a8:	f000 f912 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000012c 	.word	0x2000012c
 80007b4:	40014400 	.word	0x40014400

080007b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_TIM11_Init+0x40>)
 80007be:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <MX_TIM11_Init+0x44>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 83;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <MX_TIM11_Init+0x40>)
 80007c4:	2253      	movs	r2, #83	@ 0x53
 80007c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_TIM11_Init+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_TIM11_Init+0x40>)
 80007d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_TIM11_Init+0x40>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_TIM11_Init+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_TIM11_Init+0x40>)
 80007e4:	f002 fd1e 	bl	8003224 <HAL_TIM_Base_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80007ee:	f000 f8ef 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000174 	.word	0x20000174
 80007fc:	40014800 	.word	0x40014800

08000800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_USART2_UART_Init+0x4c>)
 8000806:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <MX_USART2_UART_Init+0x50>)
 8000808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_USART2_UART_Init+0x4c>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_USART2_UART_Init+0x4c>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_USART2_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_USART2_UART_Init+0x4c>)
 8000838:	f002 ff88 	bl	800374c <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000842:	f000 f8c5 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200001bc 	.word	0x200001bc
 8000850:	40004400 	.word	0x40004400

08000854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_DMA_Init+0x68>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <MX_DMA_Init+0x68>)
 8000864:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_DMA_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_DMA_Init+0x68>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <MX_DMA_Init+0x68>)
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_DMA_Init+0x68>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2010      	movs	r0, #16
 8000898:	f001 fa23 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800089c:	2010      	movs	r0, #16
 800089e:	f001 fa3c 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2038      	movs	r0, #56	@ 0x38
 80008a8:	f001 fa1b 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008ac:	2038      	movs	r0, #56	@ 0x38
 80008ae:	f001 fa34 	bl	8001d1a <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b31      	ldr	r3, [pc, #196]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2e      	ldr	r3, [pc, #184]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a29      	ldr	r2, [pc, #164]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a22      	ldr	r2, [pc, #136]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a1b      	ldr	r2, [pc, #108]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <MX_GPIO_Init+0xe0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	4816      	ldr	r0, [pc, #88]	@ (80009a4 <MX_GPIO_Init+0xe4>)
 800094c:	f001 ff86 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000956:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4810      	ldr	r0, [pc, #64]	@ (80009a8 <MX_GPIO_Init+0xe8>)
 8000968:	f001 fdf4 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800096c:	2320      	movs	r3, #32
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <MX_GPIO_Init+0xe4>)
 8000984:	f001 fde6 	bl	8002554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2028      	movs	r0, #40	@ 0x28
 800098e:	f001 f9a8 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000992:	2028      	movs	r0, #40	@ 0x28
 8000994:	f001 f9c1 	bl	8001d1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	@ 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020800 	.word	0x40020800

080009ac <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80009b4:	1d39      	adds	r1, r7, #4
 80009b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ba:	2201      	movs	r2, #1
 80009bc:	4803      	ldr	r0, [pc, #12]	@ (80009cc <__io_putchar+0x20>)
 80009be:	f002 ff15 	bl	80037ec <HAL_UART_Transmit>

  return ch;
 80009c2:	687b      	ldr	r3, [r7, #4]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200001bc 	.word	0x200001bc

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f001 f956 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a33      	ldr	r2, [pc, #204]	@ (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d15f      	bne.n	8000b0e <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b32      	ldr	r3, [pc, #200]	@ (8000b1c <HAL_ADC_MspInit+0xf0>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a31      	ldr	r2, [pc, #196]	@ (8000b1c <HAL_ADC_MspInit+0xf0>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <HAL_ADC_MspInit+0xf0>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <HAL_ADC_MspInit+0xf0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a2a      	ldr	r2, [pc, #168]	@ (8000b1c <HAL_ADC_MspInit+0xf0>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <HAL_ADC_MspInit+0xf0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a86:	2301      	movs	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4821      	ldr	r0, [pc, #132]	@ (8000b20 <HAL_ADC_MspInit+0xf4>)
 8000a9a:	f001 fd5b 	bl	8002554 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000aa0:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <HAL_ADC_MspInit+0xfc>)
 8000aa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ab8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000abc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ac0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ac4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ac8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000acc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ad0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ad4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ae2:	4810      	ldr	r0, [pc, #64]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ae4:	f001 f934 	bl	8001d50 <HAL_DMA_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000aee:	f7ff ff6f 	bl	80009d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a0b      	ldr	r2, [pc, #44]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000af6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000af8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2012      	movs	r0, #18
 8000b04:	f001 f8ed 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b08:	2012      	movs	r0, #18
 8000b0a:	f001 f906 	bl	8001d1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	@ 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40012000 	.word	0x40012000
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	200000cc 	.word	0x200000cc
 8000b28:	40026410 	.word	0x40026410

08000b2c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1c      	ldr	r2, [pc, #112]	@ (8000bac <HAL_TIM_Base_MspInit+0x80>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d116      	bne.n	8000b6c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x84>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x84>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x84>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2019      	movs	r0, #25
 8000b60:	f001 f8bf 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b64:	2019      	movs	r0, #25
 8000b66:	f001 f8d8 	bl	8001d1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000b6a:	e01a      	b.n	8000ba2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a10      	ldr	r2, [pc, #64]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x88>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d115      	bne.n	8000ba2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x84>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x84>)
 8000b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x84>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	201a      	movs	r0, #26
 8000b98:	f001 f8a3 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b9c:	201a      	movs	r0, #26
 8000b9e:	f001 f8bc 	bl	8001d1a <HAL_NVIC_EnableIRQ>
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40014400 	.word	0x40014400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40014800 	.word	0x40014800

08000bb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a38      	ldr	r2, [pc, #224]	@ (8000cb8 <HAL_UART_MspInit+0x100>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d16a      	bne.n	8000cb0 <HAL_UART_MspInit+0xf8>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b37      	ldr	r3, [pc, #220]	@ (8000cbc <HAL_UART_MspInit+0x104>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a36      	ldr	r2, [pc, #216]	@ (8000cbc <HAL_UART_MspInit+0x104>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b34      	ldr	r3, [pc, #208]	@ (8000cbc <HAL_UART_MspInit+0x104>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b30      	ldr	r3, [pc, #192]	@ (8000cbc <HAL_UART_MspInit+0x104>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8000cbc <HAL_UART_MspInit+0x104>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <HAL_UART_MspInit+0x104>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c12:	230c      	movs	r3, #12
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4824      	ldr	r0, [pc, #144]	@ (8000cc0 <HAL_UART_MspInit+0x108>)
 8000c2e:	f001 fc91 	bl	8002554 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c32:	4b24      	ldr	r3, [pc, #144]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c34:	4a24      	ldr	r2, [pc, #144]	@ (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c36:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c38:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c40:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c6e:	2204      	movs	r2, #4
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c74:	2203      	movs	r2, #3
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c84:	480f      	ldr	r0, [pc, #60]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c86:	f001 f863 	bl	8001d50 <HAL_DMA_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8000c90:	f7ff fe9e 	bl	80009d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2026      	movs	r0, #38	@ 0x26
 8000ca6:	f001 f81c 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000caa:	2026      	movs	r0, #38	@ 0x26
 8000cac:	f001 f835 	bl	8001d1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	20000204 	.word	0x20000204
 8000cc8:	40026088 	.word	0x40026088

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d22:	f000 f979 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <DMA1_Stream5_IRQHandler+0x10>)
 8000d32:	f001 f9a5 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000204 	.word	0x20000204

08000d40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d44:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <ADC_IRQHandler+0x10>)
 8000d46:	f000 f9ca 	bl	80010de <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000084 	.word	0x20000084

08000d54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d5a:	f002 fb44 	bl	80033e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000012c 	.word	0x2000012c

08000d68 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000d6e:	f002 fb3a 	bl	80033e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000174 	.word	0x20000174

08000d7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d80:	4802      	ldr	r0, [pc, #8]	@ (8000d8c <USART2_IRQHandler+0x10>)
 8000d82:	f002 fe17 	bl	80039b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001bc 	.word	0x200001bc

08000d90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d98:	f001 fd94 	bl	80028c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <DMA2_Stream0_IRQHandler+0x10>)
 8000da6:	f001 f96b 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000cc 	.word	0x200000cc

08000db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
  }

  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fdcf 	bl	80009ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
  }
  return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_isatty>:

int _isatty(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f004 fa12 	bl	80052e8 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20018000 	.word	0x20018000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	20000284 	.word	0x20000284
 8000ef8:	200003e0 	.word	0x200003e0

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f24:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f26:	490e      	ldr	r1, [pc, #56]	@ (8000f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f28:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f3c:	4c0b      	ldr	r4, [pc, #44]	@ (8000f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4a:	f7ff ffd7 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f004 f9d1 	bl	80052f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fb2b 	bl	80005ac <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f64:	08005e20 	.word	0x08005e20
  ldr r2, =_sbss
 8000f68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f6c:	200003e0 	.word	0x200003e0

08000f70 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <DMA1_Stream0_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 fe95 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fd18 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fead 	bl	8001d36 <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 fe75 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	20000288 	.word	0x20000288

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000288 	.word	0x20000288

08001058 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e033      	b.n	80010d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fcd8 	bl	8000a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	d118      	bne.n	80010c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800109e:	f023 0302 	bic.w	r3, r3, #2
 80010a2:	f043 0202 	orr.w	r2, r3, #2
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 fbb6 	bl	800181c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f023 0303 	bic.w	r3, r3, #3
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80010c6:	e001      	b.n	80010cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d049      	beq.n	80011a8 <HAL_ADC_IRQHandler+0xca>
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d046      	beq.n	80011a8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d12b      	bne.n	8001198 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001144:	2b00      	cmp	r3, #0
 8001146:	d127      	bne.n	8001198 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001160:	2b00      	cmp	r3, #0
 8001162:	d119      	bne.n	8001198 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0220 	bic.w	r2, r2, #32
 8001172:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d105      	bne.n	8001198 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	f043 0201 	orr.w	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f003 fe31 	bl	8004e00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f06f 0212 	mvn.w	r2, #18
 80011a6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d057      	beq.n	800126e <HAL_ADC_IRQHandler+0x190>
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d054      	beq.n	800126e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d139      	bne.n	800125e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001202:	2b00      	cmp	r3, #0
 8001204:	d12b      	bne.n	800125e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001210:	2b00      	cmp	r3, #0
 8001212:	d124      	bne.n	800125e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800121e:	2b00      	cmp	r3, #0
 8001220:	d11d      	bne.n	800125e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001226:	2b00      	cmp	r3, #0
 8001228:	d119      	bne.n	800125e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001238:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800124e:	2b00      	cmp	r3, #0
 8001250:	d105      	bne.n	800125e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fc5a 	bl	8001b18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f06f 020c 	mvn.w	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d017      	beq.n	80012b4 <HAL_ADC_IRQHandler+0x1d6>
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d014      	beq.n	80012b4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b01      	cmp	r3, #1
 8001296:	d10d      	bne.n	80012b4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f983 	bl	80015b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f06f 0201 	mvn.w	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012c2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d015      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x218>
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d012      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d4:	f043 0202 	orr.w	r2, r3, #2
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f06f 0220 	mvn.w	r2, #32
 80012e4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f96c 	bl	80015c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f06f 0220 	mvn.w	r2, #32
 80012f4:	601a      	str	r2, [r3, #0]
  }
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Start_DMA+0x22>
 800131e:	2302      	movs	r3, #2
 8001320:	e0d0      	b.n	80014c4 <HAL_ADC_Start_DMA+0x1c4>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b01      	cmp	r3, #1
 8001336:	d018      	beq.n	800136a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001348:	4b60      	ldr	r3, [pc, #384]	@ (80014cc <HAL_ADC_Start_DMA+0x1cc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a60      	ldr	r2, [pc, #384]	@ (80014d0 <HAL_ADC_Start_DMA+0x1d0>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0c9a      	lsrs	r2, r3, #18
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800135c:	e002      	b.n	8001364 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3b01      	subs	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f9      	bne.n	800135e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001378:	d107      	bne.n	800138a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001388:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	f040 8088 	bne.w	80014aa <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013d8:	d106      	bne.n	80013e8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	f023 0206 	bic.w	r2, r3, #6
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80013e6:	e002      	b.n	80013ee <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f6:	4b37      	ldr	r3, [pc, #220]	@ (80014d4 <HAL_ADC_Start_DMA+0x1d4>)
 80013f8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013fe:	4a36      	ldr	r2, [pc, #216]	@ (80014d8 <HAL_ADC_Start_DMA+0x1d8>)
 8001400:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001406:	4a35      	ldr	r2, [pc, #212]	@ (80014dc <HAL_ADC_Start_DMA+0x1dc>)
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800140e:	4a34      	ldr	r2, [pc, #208]	@ (80014e0 <HAL_ADC_Start_DMA+0x1e0>)
 8001410:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800141a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800142a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800143a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	334c      	adds	r3, #76	@ 0x4c
 8001446:	4619      	mov	r1, r3
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f000 fd2e 	bl	8001eac <HAL_DMA_Start_IT>
 8001450:	4603      	mov	r3, r0
 8001452:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10f      	bne.n	8001480 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d129      	bne.n	80014c2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	e020      	b.n	80014c2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <HAL_ADC_Start_DMA+0x1e4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d11b      	bne.n	80014c2 <HAL_ADC_Start_DMA+0x1c2>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d114      	bne.n	80014c2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	e00b      	b.n	80014c2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f043 0210 	orr.w	r2, r3, #16
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f043 0201 	orr.w	r2, r3, #1
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	431bde83 	.word	0x431bde83
 80014d4:	40012300 	.word	0x40012300
 80014d8:	08001a15 	.word	0x08001a15
 80014dc:	08001acf 	.word	0x08001acf
 80014e0:	08001aeb 	.word	0x08001aeb
 80014e4:	40012000 	.word	0x40012000

080014e8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_Stop_DMA+0x1a>
 80014fe:	2302      	movs	r3, #2
 8001500:	e048      	b.n	8001594 <HAL_ADC_Stop_DMA+0xac>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d130      	bne.n	800158a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001536:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d10f      	bne.n	8001566 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fd06 	bl	8001f5c <HAL_DMA_Abort>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001574:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	f043 0201 	orr.w	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1c>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e105      	b.n	8001800 <HAL_ADC_ConfigChannel+0x228>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b09      	cmp	r3, #9
 8001602:	d925      	bls.n	8001650 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68d9      	ldr	r1, [r3, #12]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	3b1e      	subs	r3, #30
 800161a:	2207      	movs	r2, #7
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43da      	mvns	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	400a      	ands	r2, r1
 8001628:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68d9      	ldr	r1, [r3, #12]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	4603      	mov	r3, r0
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4403      	add	r3, r0
 8001642:	3b1e      	subs	r3, #30
 8001644:	409a      	lsls	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	e022      	b.n	8001696 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6919      	ldr	r1, [r3, #16]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	2207      	movs	r2, #7
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	400a      	ands	r2, r1
 8001672:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6919      	ldr	r1, [r3, #16]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	4603      	mov	r3, r0
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4403      	add	r3, r0
 800168c:	409a      	lsls	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b06      	cmp	r3, #6
 800169c:	d824      	bhi.n	80016e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	3b05      	subs	r3, #5
 80016b0:	221f      	movs	r2, #31
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	400a      	ands	r2, r1
 80016be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	3b05      	subs	r3, #5
 80016da:	fa00 f203 	lsl.w	r2, r0, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e6:	e04c      	b.n	8001782 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d824      	bhi.n	800173a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3b23      	subs	r3, #35	@ 0x23
 8001702:	221f      	movs	r2, #31
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43da      	mvns	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	400a      	ands	r2, r1
 8001710:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	b29b      	uxth	r3, r3
 800171e:	4618      	mov	r0, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b23      	subs	r3, #35	@ 0x23
 800172c:	fa00 f203 	lsl.w	r2, r0, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	631a      	str	r2, [r3, #48]	@ 0x30
 8001738:	e023      	b.n	8001782 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	3b41      	subs	r3, #65	@ 0x41
 800174c:	221f      	movs	r2, #31
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	400a      	ands	r2, r1
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	3b41      	subs	r3, #65	@ 0x41
 8001776:	fa00 f203 	lsl.w	r2, r0, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001782:	4b22      	ldr	r3, [pc, #136]	@ (800180c <HAL_ADC_ConfigChannel+0x234>)
 8001784:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <HAL_ADC_ConfigChannel+0x238>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d109      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1cc>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b12      	cmp	r3, #18
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a19      	ldr	r2, [pc, #100]	@ (8001810 <HAL_ADC_ConfigChannel+0x238>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d123      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x21e>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d003      	beq.n	80017be <HAL_ADC_ConfigChannel+0x1e6>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b11      	cmp	r3, #17
 80017bc:	d11b      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d111      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_ADC_ConfigChannel+0x23c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <HAL_ADC_ConfigChannel+0x240>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	0c9a      	lsrs	r2, r3, #18
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017e8:	e002      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f9      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40012300 	.word	0x40012300
 8001810:	40012000 	.word	0x40012000
 8001814:	20000000 	.word	0x20000000
 8001818:	431bde83 	.word	0x431bde83

0800181c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001824:	4b79      	ldr	r3, [pc, #484]	@ (8001a0c <ADC_Init+0x1f0>)
 8001826:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	431a      	orrs	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	021a      	lsls	r2, r3, #8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001874:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ae:	4a58      	ldr	r2, [pc, #352]	@ (8001a10 <ADC_Init+0x1f4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d022      	beq.n	80018fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6899      	ldr	r1, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6899      	ldr	r1, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	e00f      	b.n	800191a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001908:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001918:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0202 	bic.w	r2, r2, #2
 8001928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6899      	ldr	r1, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7e1b      	ldrb	r3, [r3, #24]
 8001934:	005a      	lsls	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01b      	beq.n	8001980 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001956:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001966:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	3b01      	subs	r3, #1
 8001974:	035a      	lsls	r2, r3, #13
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	e007      	b.n	8001990 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	051a      	lsls	r2, r3, #20
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019d2:	025a      	lsls	r2, r3, #9
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6899      	ldr	r1, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	029a      	lsls	r2, r3, #10
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	609a      	str	r2, [r3, #8]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	40012300 	.word	0x40012300
 8001a10:	0f000001 	.word	0x0f000001

08001a14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d13c      	bne.n	8001aa8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d12b      	bne.n	8001aa0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d127      	bne.n	8001aa0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d119      	bne.n	8001aa0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0220 	bic.w	r2, r2, #32
 8001a7a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f003 f9ad 	bl	8004e00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001aa6:	e00e      	b.n	8001ac6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fd85 	bl	80015c4 <HAL_ADC_ErrorCallback>
}
 8001aba:	e004      	b.n	8001ac6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ada:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f7ff fd5d 	bl	800159c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2240      	movs	r2, #64	@ 0x40
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f043 0204 	orr.w	r2, r3, #4
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fd5a 	bl	80015c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	@ (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	@ 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff8e 	bl	8001bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff29 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff3e 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff8e 	bl	8001c20 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5d 	bl	8001bcc <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff31 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff f970 	bl	8001040 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e099      	b.n	8001ea0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8c:	e00f      	b.n	8001dae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8e:	f7ff f957 	bl	8001040 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d908      	bls.n	8001dae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2203      	movs	r2, #3
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e078      	b.n	8001ea0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e8      	bne.n	8001d8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_DMA_Init+0x158>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d107      	bne.n	8001e18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	4313      	orrs	r3, r2
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f023 0307 	bic.w	r3, r3, #7
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d117      	bne.n	8001e72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00e      	beq.n	8001e72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb01 	bl	800245c <DMA_CheckFifoParam>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2240      	movs	r2, #64	@ 0x40
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e016      	b.n	8001ea0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fab8 	bl	80023f0 <DMA_CalcBaseAndBitshift>
 8001e80:	4603      	mov	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	223f      	movs	r2, #63	@ 0x3f
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	f010803f 	.word	0xf010803f

08001eac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_DMA_Start_IT+0x26>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e040      	b.n	8001f54 <HAL_DMA_Start_IT+0xa8>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d12f      	bne.n	8001f46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fa4a 	bl	8002394 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	223f      	movs	r2, #63	@ 0x3f
 8001f06:	409a      	lsls	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0216 	orr.w	r2, r2, #22
 8001f1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0208 	orr.w	r2, r2, #8
 8001f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e005      	b.n	8001f52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f6a:	f7ff f869 	bl	8001040 <HAL_GetTick>
 8001f6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2280      	movs	r2, #128	@ 0x80
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e052      	b.n	8002034 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0216 	bic.w	r2, r2, #22
 8001f9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_DMA_Abort+0x62>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0208 	bic.w	r2, r2, #8
 8001fcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fde:	e013      	b.n	8002008 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe0:	f7ff f82e 	bl	8001040 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d90c      	bls.n	8002008 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e015      	b.n	8002034 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e4      	bne.n	8001fe0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	223f      	movs	r2, #63	@ 0x3f
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d004      	beq.n	800205a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00c      	b.n	8002074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2205      	movs	r2, #5
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800208c:	4b8e      	ldr	r3, [pc, #568]	@ (80022c8 <HAL_DMA_IRQHandler+0x248>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a8e      	ldr	r2, [pc, #568]	@ (80022cc <HAL_DMA_IRQHandler+0x24c>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0a9b      	lsrs	r3, r3, #10
 8002098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	2208      	movs	r2, #8
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01a      	beq.n	80020ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	2208      	movs	r2, #8
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f0:	2201      	movs	r2, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d012      	beq.n	8002122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	f043 0202 	orr.w	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002126:	2204      	movs	r2, #4
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d012      	beq.n	8002158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	2204      	movs	r2, #4
 8002146:	409a      	lsls	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	f043 0204 	orr.w	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215c:	2210      	movs	r2, #16
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d043      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03c      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217a:	2210      	movs	r2, #16
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d018      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d024      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
 80021ae:	e01f      	b.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
 80021c0:	e016      	b.n	80021f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0208 	bic.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f4:	2220      	movs	r2, #32
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 808f 	beq.w	8002320 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8087 	beq.w	8002320 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002216:	2220      	movs	r2, #32
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b05      	cmp	r3, #5
 8002228:	d136      	bne.n	8002298 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0216 	bic.w	r2, r2, #22
 8002238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <HAL_DMA_IRQHandler+0x1da>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0208 	bic.w	r2, r2, #8
 8002268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	223f      	movs	r2, #63	@ 0x3f
 8002270:	409a      	lsls	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800228a:	2b00      	cmp	r3, #0
 800228c:	d07e      	beq.n	800238c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
        }
        return;
 8002296:	e079      	b.n	800238c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01d      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10d      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d031      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
 80022c4:	e02c      	b.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
 80022c6:	bf00      	nop
 80022c8:	20000000 	.word	0x20000000
 80022cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e01e      	b.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10f      	bne.n	8002310 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0210 	bic.w	r2, r2, #16
 80022fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002324:	2b00      	cmp	r3, #0
 8002326:	d032      	beq.n	800238e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d022      	beq.n	800237a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2205      	movs	r2, #5
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	3301      	adds	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	d307      	bcc.n	8002368 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f2      	bne.n	800234c <HAL_DMA_IRQHandler+0x2cc>
 8002366:	e000      	b.n	800236a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002368:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
 800238a:	e000      	b.n	800238e <HAL_DMA_IRQHandler+0x30e>
        return;
 800238c:	bf00      	nop
    }
  }
}
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b40      	cmp	r3, #64	@ 0x40
 80023c0:	d108      	bne.n	80023d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023d2:	e007      	b.n	80023e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3b10      	subs	r3, #16
 8002400:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <DMA_CalcBaseAndBitshift+0x64>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800240a:	4a13      	ldr	r2, [pc, #76]	@ (8002458 <DMA_CalcBaseAndBitshift+0x68>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d909      	bls.n	8002432 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	1d1a      	adds	r2, r3, #4
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002430:	e007      	b.n	8002442 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	aaaaaaab 	.word	0xaaaaaaab
 8002458:	08005dd4 	.word	0x08005dd4

0800245c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11f      	bne.n	80024b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d856      	bhi.n	800252a <DMA_CheckFifoParam+0xce>
 800247c:	a201      	add	r2, pc, #4	@ (adr r2, 8002484 <DMA_CheckFifoParam+0x28>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	08002495 	.word	0x08002495
 8002488:	080024a7 	.word	0x080024a7
 800248c:	08002495 	.word	0x08002495
 8002490:	0800252b 	.word	0x0800252b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d046      	beq.n	800252e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e043      	b.n	800252e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024ae:	d140      	bne.n	8002532 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b4:	e03d      	b.n	8002532 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024be:	d121      	bne.n	8002504 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d837      	bhi.n	8002536 <DMA_CheckFifoParam+0xda>
 80024c6:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <DMA_CheckFifoParam+0x70>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	080024e3 	.word	0x080024e3
 80024d4:	080024dd 	.word	0x080024dd
 80024d8:	080024f5 	.word	0x080024f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
      break;
 80024e0:	e030      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d025      	beq.n	800253a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f2:	e022      	b.n	800253a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024fc:	d11f      	bne.n	800253e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002502:	e01c      	b.n	800253e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d903      	bls.n	8002512 <DMA_CheckFifoParam+0xb6>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d003      	beq.n	8002518 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002510:	e018      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
      break;
 8002516:	e015      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      break;
 8002528:	e00b      	b.n	8002542 <DMA_CheckFifoParam+0xe6>
      break;
 800252a:	bf00      	nop
 800252c:	e00a      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
 8002530:	e008      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e006      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e004      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e002      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;   
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <DMA_CheckFifoParam+0xe8>
      break;
 8002542:	bf00      	nop
    }
  } 
  
  return status; 
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	@ 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e159      	b.n	8002824 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8148 	bne.w	800281e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80a2 	beq.w	800281e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b57      	ldr	r3, [pc, #348]	@ (800283c <HAL_GPIO_Init+0x2e8>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	4a56      	ldr	r2, [pc, #344]	@ (800283c <HAL_GPIO_Init+0x2e8>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ea:	4b54      	ldr	r3, [pc, #336]	@ (800283c <HAL_GPIO_Init+0x2e8>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a52      	ldr	r2, [pc, #328]	@ (8002840 <HAL_GPIO_Init+0x2ec>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a49      	ldr	r2, [pc, #292]	@ (8002844 <HAL_GPIO_Init+0x2f0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x202>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a48      	ldr	r2, [pc, #288]	@ (8002848 <HAL_GPIO_Init+0x2f4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x1fe>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a47      	ldr	r2, [pc, #284]	@ (800284c <HAL_GPIO_Init+0x2f8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x1fa>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a46      	ldr	r2, [pc, #280]	@ (8002850 <HAL_GPIO_Init+0x2fc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x1f6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a45      	ldr	r2, [pc, #276]	@ (8002854 <HAL_GPIO_Init+0x300>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x1f2>
 8002742:	2304      	movs	r3, #4
 8002744:	e008      	b.n	8002758 <HAL_GPIO_Init+0x204>
 8002746:	2307      	movs	r3, #7
 8002748:	e006      	b.n	8002758 <HAL_GPIO_Init+0x204>
 800274a:	2303      	movs	r3, #3
 800274c:	e004      	b.n	8002758 <HAL_GPIO_Init+0x204>
 800274e:	2302      	movs	r3, #2
 8002750:	e002      	b.n	8002758 <HAL_GPIO_Init+0x204>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_GPIO_Init+0x204>
 8002756:	2300      	movs	r3, #0
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f002 0203 	and.w	r2, r2, #3
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	4093      	lsls	r3, r2
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002768:	4935      	ldr	r1, [pc, #212]	@ (8002840 <HAL_GPIO_Init+0x2ec>)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002776:	4b38      	ldr	r3, [pc, #224]	@ (8002858 <HAL_GPIO_Init+0x304>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279a:	4a2f      	ldr	r2, [pc, #188]	@ (8002858 <HAL_GPIO_Init+0x304>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002858 <HAL_GPIO_Init+0x304>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c4:	4a24      	ldr	r2, [pc, #144]	@ (8002858 <HAL_GPIO_Init+0x304>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ca:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <HAL_GPIO_Init+0x304>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002858 <HAL_GPIO_Init+0x304>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f4:	4b18      	ldr	r3, [pc, #96]	@ (8002858 <HAL_GPIO_Init+0x304>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002818:	4a0f      	ldr	r2, [pc, #60]	@ (8002858 <HAL_GPIO_Init+0x304>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3301      	adds	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	2b0f      	cmp	r3, #15
 8002828:	f67f aea2 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3724      	adds	r7, #36	@ 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	40013800 	.word	0x40013800
 8002844:	40020000 	.word	0x40020000
 8002848:	40020400 	.word	0x40020400
 800284c:	40020800 	.word	0x40020800
 8002850:	40020c00 	.word	0x40020c00
 8002854:	40021000 	.word	0x40021000
 8002858:	40013c00 	.word	0x40013c00

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002878:	e003      	b.n	8002882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	041a      	lsls	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	619a      	str	r2, [r3, #24]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a0:	887a      	ldrh	r2, [r7, #2]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4013      	ands	r3, r2
 80028a6:	041a      	lsls	r2, r3, #16
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	400b      	ands	r3, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	619a      	str	r2, [r3, #24]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028ce:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028da:	4a05      	ldr	r2, [pc, #20]	@ (80028f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 fa18 	bl	8004d18 <HAL_GPIO_EXTI_Callback>
  }
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40013c00 	.word	0x40013c00

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e267      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d075      	beq.n	80029fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002912:	4b88      	ldr	r3, [pc, #544]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d00c      	beq.n	8002938 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4b85      	ldr	r3, [pc, #532]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002926:	2b08      	cmp	r3, #8
 8002928:	d112      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292a:	4b82      	ldr	r3, [pc, #520]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002936:	d10b      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	4b7e      	ldr	r3, [pc, #504]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05b      	beq.n	80029fc <HAL_RCC_OscConfig+0x108>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d157      	bne.n	80029fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e242      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002958:	d106      	bne.n	8002968 <HAL_RCC_OscConfig+0x74>
 800295a:	4b76      	ldr	r3, [pc, #472]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a75      	ldr	r2, [pc, #468]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e01d      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x98>
 8002972:	4b70      	ldr	r3, [pc, #448]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6f      	ldr	r2, [pc, #444]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a6c      	ldr	r2, [pc, #432]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 800298c:	4b69      	ldr	r3, [pc, #420]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a68      	ldr	r2, [pc, #416]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4b66      	ldr	r3, [pc, #408]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a65      	ldr	r2, [pc, #404]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 800299e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fb48 	bl	8001040 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fb44 	bl	8001040 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e207      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0xc0>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe fb34 	bl	8001040 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe fb30 	bl	8001040 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	@ 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1f3      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	4b51      	ldr	r3, [pc, #324]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0xe8>
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d063      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b47      	ldr	r3, [pc, #284]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d11c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b44      	ldr	r3, [pc, #272]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d116      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	4b41      	ldr	r3, [pc, #260]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e1c7      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4b3b      	ldr	r3, [pc, #236]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4937      	ldr	r1, [pc, #220]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	e03a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a64:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <HAL_RCC_OscConfig+0x244>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fae9 	bl	8001040 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a72:	f7fe fae5 	bl	8001040 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1a8      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b28      	ldr	r3, [pc, #160]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4925      	ldr	r1, [pc, #148]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa6:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <HAL_RCC_OscConfig+0x244>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fac8 	bl	8001040 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7fe fac4 	bl	8001040 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e187      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d036      	beq.n	8002b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_RCC_OscConfig+0x248>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe faa8 	bl	8001040 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe faa4 	bl	8001040 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e167      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x200>
 8002b12:	e01b      	b.n	8002b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b14:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_OscConfig+0x248>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fa91 	bl	8001040 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	e00e      	b.n	8002b40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe fa8d 	bl	8001040 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d907      	bls.n	8002b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e150      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470000 	.word	0x42470000
 8002b3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	4b88      	ldr	r3, [pc, #544]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ea      	bne.n	8002b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8097 	beq.w	8002c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5e:	4b81      	ldr	r3, [pc, #516]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	4a7c      	ldr	r2, [pc, #496]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b77      	ldr	r3, [pc, #476]	@ (8002d68 <HAL_RCC_OscConfig+0x474>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d118      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b74      	ldr	r3, [pc, #464]	@ (8002d68 <HAL_RCC_OscConfig+0x474>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a73      	ldr	r2, [pc, #460]	@ (8002d68 <HAL_RCC_OscConfig+0x474>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fa4d 	bl	8001040 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7fe fa49 	bl	8001040 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e10c      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002d68 <HAL_RCC_OscConfig+0x474>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x2ea>
 8002bd0:	4b64      	ldr	r3, [pc, #400]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd4:	4a63      	ldr	r2, [pc, #396]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x324>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x30c>
 8002be6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bea:	4a5e      	ldr	r2, [pc, #376]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0x324>
 8002c00:	4b58      	ldr	r3, [pc, #352]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c04:	4a57      	ldr	r2, [pc, #348]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0c:	4b55      	ldr	r3, [pc, #340]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	4a54      	ldr	r2, [pc, #336]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d015      	beq.n	8002c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fa0e 	bl	8001040 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7fe fa0a 	bl	8001040 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0cb      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3e:	4b49      	ldr	r3, [pc, #292]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ee      	beq.n	8002c28 <HAL_RCC_OscConfig+0x334>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7fe f9f8 	bl	8001040 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe f9f4 	bl	8001040 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0b5      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1ee      	bne.n	8002c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7c:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	4a38      	ldr	r2, [pc, #224]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a1 	beq.w	8002dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c92:	4b34      	ldr	r3, [pc, #208]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d05c      	beq.n	8002d58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d141      	bne.n	8002d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b31      	ldr	r3, [pc, #196]	@ (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe f9c8 	bl	8001040 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe f9c4 	bl	8001040 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e087      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	4b27      	ldr	r3, [pc, #156]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	019b      	lsls	r3, r3, #6
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	3b01      	subs	r3, #1
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	491b      	ldr	r1, [pc, #108]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7fe f99d 	bl	8001040 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7fe f999 	bl	8001040 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e05c      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x416>
 8002d28:	e054      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe f986 	bl	8001040 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe f982 	bl	8001040 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e045      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x444>
 8002d56:	e03d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e038      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <HAL_RCC_OscConfig+0x4ec>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d028      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d121      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d11a      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002da0:	4013      	ands	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d111      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	085b      	lsrs	r3, r3, #1
 8002db8:	3b01      	subs	r3, #1
 8002dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800

08002de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0cc      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df8:	4b68      	ldr	r3, [pc, #416]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d90c      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b65      	ldr	r3, [pc, #404]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b63      	ldr	r3, [pc, #396]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0b8      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e38:	4b59      	ldr	r3, [pc, #356]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a58      	ldr	r2, [pc, #352]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e50:	4b53      	ldr	r3, [pc, #332]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a52      	ldr	r2, [pc, #328]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b50      	ldr	r3, [pc, #320]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	494d      	ldr	r1, [pc, #308]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d044      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d119      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e06f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e067      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec2:	4b37      	ldr	r3, [pc, #220]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f023 0203 	bic.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4934      	ldr	r1, [pc, #208]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed4:	f7fe f8b4 	bl	8001040 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002edc:	f7fe f8b0 	bl	8001040 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e04f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 020c 	and.w	r2, r3, #12
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d1eb      	bne.n	8002edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f04:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d20c      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b22      	ldr	r3, [pc, #136]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e032      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4916      	ldr	r1, [pc, #88]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	490e      	ldr	r1, [pc, #56]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f6a:	f000 f821 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490a      	ldr	r1, [pc, #40]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	4a09      	ldr	r2, [pc, #36]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f86:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe f814 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023c00 	.word	0x40023c00
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	08005dbc 	.word	0x08005dbc
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb4:	b094      	sub	sp, #80	@ 0x50
 8002fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc8:	4b79      	ldr	r3, [pc, #484]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	f200 80e1 	bhi.w	800319c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0x3a>
 8002fe2:	e0db      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe4:	4b73      	ldr	r3, [pc, #460]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fe8:	e0db      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fea:	4b73      	ldr	r3, [pc, #460]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fee:	e0d8      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ff8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003006:	4b6a      	ldr	r3, [pc, #424]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	2200      	movs	r2, #0
 800300e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003010:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003018:	633b      	str	r3, [r7, #48]	@ 0x30
 800301a:	2300      	movs	r3, #0
 800301c:	637b      	str	r3, [r7, #52]	@ 0x34
 800301e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003022:	4622      	mov	r2, r4
 8003024:	462b      	mov	r3, r5
 8003026:	f04f 0000 	mov.w	r0, #0
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	0159      	lsls	r1, r3, #5
 8003030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003034:	0150      	lsls	r0, r2, #5
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4621      	mov	r1, r4
 800303c:	1a51      	subs	r1, r2, r1
 800303e:	6139      	str	r1, [r7, #16]
 8003040:	4629      	mov	r1, r5
 8003042:	eb63 0301 	sbc.w	r3, r3, r1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003054:	4659      	mov	r1, fp
 8003056:	018b      	lsls	r3, r1, #6
 8003058:	4651      	mov	r1, sl
 800305a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305e:	4651      	mov	r1, sl
 8003060:	018a      	lsls	r2, r1, #6
 8003062:	4651      	mov	r1, sl
 8003064:	ebb2 0801 	subs.w	r8, r2, r1
 8003068:	4659      	mov	r1, fp
 800306a:	eb63 0901 	sbc.w	r9, r3, r1
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800307a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003082:	4690      	mov	r8, r2
 8003084:	4699      	mov	r9, r3
 8003086:	4623      	mov	r3, r4
 8003088:	eb18 0303 	adds.w	r3, r8, r3
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	462b      	mov	r3, r5
 8003090:	eb49 0303 	adc.w	r3, r9, r3
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030a2:	4629      	mov	r1, r5
 80030a4:	024b      	lsls	r3, r1, #9
 80030a6:	4621      	mov	r1, r4
 80030a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ac:	4621      	mov	r1, r4
 80030ae:	024a      	lsls	r2, r1, #9
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b6:	2200      	movs	r2, #0
 80030b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030c0:	f7fd f8de 	bl	8000280 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030cc:	e058      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	2200      	movs	r2, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	4611      	mov	r1, r2
 80030da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	f04f 0000 	mov.w	r0, #0
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	0159      	lsls	r1, r3, #5
 80030f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fa:	0150      	lsls	r0, r2, #5
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4641      	mov	r1, r8
 8003102:	ebb2 0a01 	subs.w	sl, r2, r1
 8003106:	4649      	mov	r1, r9
 8003108:	eb63 0b01 	sbc.w	fp, r3, r1
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800311c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003120:	ebb2 040a 	subs.w	r4, r2, sl
 8003124:	eb63 050b 	sbc.w	r5, r3, fp
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	00eb      	lsls	r3, r5, #3
 8003132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003136:	00e2      	lsls	r2, r4, #3
 8003138:	4614      	mov	r4, r2
 800313a:	461d      	mov	r5, r3
 800313c:	4643      	mov	r3, r8
 800313e:	18e3      	adds	r3, r4, r3
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	464b      	mov	r3, r9
 8003144:	eb45 0303 	adc.w	r3, r5, r3
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003156:	4629      	mov	r1, r5
 8003158:	028b      	lsls	r3, r1, #10
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003160:	4621      	mov	r1, r4
 8003162:	028a      	lsls	r2, r1, #10
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800316a:	2200      	movs	r2, #0
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	61fa      	str	r2, [r7, #28]
 8003170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003174:	f7fd f884 	bl	8000280 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003180:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	3301      	adds	r3, #1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800319e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3750      	adds	r7, #80	@ 0x50
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	00f42400 	.word	0x00f42400
 80031b8:	007a1200 	.word	0x007a1200

080031bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c0:	4b03      	ldr	r3, [pc, #12]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000000 	.word	0x20000000

080031d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d8:	f7ff fff0 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	0a9b      	lsrs	r3, r3, #10
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4903      	ldr	r1, [pc, #12]	@ (80031f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	08005dcc 	.word	0x08005dcc

080031fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003200:	f7ff ffdc 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0b5b      	lsrs	r3, r3, #13
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4903      	ldr	r1, [pc, #12]	@ (8003220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	08005dcc 	.word	0x08005dcc

08003224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e041      	b.n	80032ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd fc6e 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3304      	adds	r3, #4
 8003260:	4619      	mov	r1, r3
 8003262:	4610      	mov	r0, r2
 8003264:	f000 f9d8 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d001      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e044      	b.n	8003366 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003374 <HAL_TIM_Base_Start_IT+0xb0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d018      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x6c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003306:	d013      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x6c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1a      	ldr	r2, [pc, #104]	@ (8003378 <HAL_TIM_Base_Start_IT+0xb4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00e      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x6c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a19      	ldr	r2, [pc, #100]	@ (800337c <HAL_TIM_Base_Start_IT+0xb8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x6c>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a17      	ldr	r2, [pc, #92]	@ (8003380 <HAL_TIM_Base_Start_IT+0xbc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0x6c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a16      	ldr	r2, [pc, #88]	@ (8003384 <HAL_TIM_Base_Start_IT+0xc0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d111      	bne.n	8003354 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b06      	cmp	r3, #6
 8003340:	d010      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	e007      	b.n	8003364 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40014000 	.word	0x40014000

08003388 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6a1a      	ldr	r2, [r3, #32]
 80033a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10f      	bne.n	80033d0 <HAL_TIM_Base_Stop_IT+0x48>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_Base_Stop_IT+0x48>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d01b      	beq.n	800344a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0202 	mvn.w	r2, #2
 800341a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f8d2 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 8003436:	e005      	b.n	8003444 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f8c4 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8d5 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01b      	beq.n	8003496 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f06f 0204 	mvn.w	r2, #4
 8003466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8ac 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 8003482:	e005      	b.n	8003490 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f89e 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8af 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d020      	beq.n	80034e2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01b      	beq.n	80034e2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0208 	mvn.w	r2, #8
 80034b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2204      	movs	r2, #4
 80034b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f886 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 80034ce:	e005      	b.n	80034dc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f878 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f889 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01b      	beq.n	800352e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f06f 0210 	mvn.w	r2, #16
 80034fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2208      	movs	r2, #8
 8003504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f860 	bl	80035da <HAL_TIM_IC_CaptureCallback>
 800351a:	e005      	b.n	8003528 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f852 	bl	80035c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f863 	bl	80035ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00c      	beq.n	8003552 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f06f 0201 	mvn.w	r2, #1
 800354a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f001 fbc1 	bl	8004cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00c      	beq.n	8003576 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8e1 	bl	8003738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f834 	bl	8003602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f06f 0220 	mvn.w	r2, #32
 80035b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f8b3 	bl	8003724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a37      	ldr	r2, [pc, #220]	@ (8003708 <TIM_Base_SetConfig+0xf0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00f      	beq.n	8003650 <TIM_Base_SetConfig+0x38>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003636:	d00b      	beq.n	8003650 <TIM_Base_SetConfig+0x38>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a34      	ldr	r2, [pc, #208]	@ (800370c <TIM_Base_SetConfig+0xf4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d007      	beq.n	8003650 <TIM_Base_SetConfig+0x38>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a33      	ldr	r2, [pc, #204]	@ (8003710 <TIM_Base_SetConfig+0xf8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_Base_SetConfig+0x38>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a32      	ldr	r2, [pc, #200]	@ (8003714 <TIM_Base_SetConfig+0xfc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d108      	bne.n	8003662 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a28      	ldr	r2, [pc, #160]	@ (8003708 <TIM_Base_SetConfig+0xf0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01b      	beq.n	80036a2 <TIM_Base_SetConfig+0x8a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003670:	d017      	beq.n	80036a2 <TIM_Base_SetConfig+0x8a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a25      	ldr	r2, [pc, #148]	@ (800370c <TIM_Base_SetConfig+0xf4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <TIM_Base_SetConfig+0x8a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a24      	ldr	r2, [pc, #144]	@ (8003710 <TIM_Base_SetConfig+0xf8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00f      	beq.n	80036a2 <TIM_Base_SetConfig+0x8a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a23      	ldr	r2, [pc, #140]	@ (8003714 <TIM_Base_SetConfig+0xfc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_Base_SetConfig+0x8a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <TIM_Base_SetConfig+0x100>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0x8a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a21      	ldr	r2, [pc, #132]	@ (800371c <TIM_Base_SetConfig+0x104>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0x8a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a20      	ldr	r2, [pc, #128]	@ (8003720 <TIM_Base_SetConfig+0x108>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003708 <TIM_Base_SetConfig+0xf0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d103      	bne.n	80036e2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	601a      	str	r2, [r3, #0]
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40010000 	.word	0x40010000
 800370c:	40000400 	.word	0x40000400
 8003710:	40000800 	.word	0x40000800
 8003714:	40000c00 	.word	0x40000c00
 8003718:	40014000 	.word	0x40014000
 800371c:	40014400 	.word	0x40014400
 8003720:	40014800 	.word	0x40014800

08003724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e042      	b.n	80037e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd fa20 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	@ 0x24
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800378e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 ffa1 	bl	80046d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	@ 0x28
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	d175      	bne.n	80038f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_UART_Transmit+0x2c>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e06e      	b.n	80038fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2221      	movs	r2, #33	@ 0x21
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382a:	f7fd fc09 	bl	8001040 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003844:	d108      	bne.n	8003858 <HAL_UART_Transmit+0x6c>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	e003      	b.n	8003860 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003860:	e02e      	b.n	80038c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	2180      	movs	r1, #128	@ 0x80
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fc71 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e03a      	b.n	80038fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3302      	adds	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e007      	b.n	80038b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	3301      	adds	r3, #1
 80038b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1cb      	bne.n	8003862 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2140      	movs	r1, #64	@ 0x40
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fc3d 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e006      	b.n	80038fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b08c      	sub	sp, #48	@ 0x30
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b20      	cmp	r3, #32
 800391a:	d146      	bne.n	80039aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e03f      	b.n	80039ac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	461a      	mov	r2, r3
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fc62 	bl	8004208 <UART_Start_Receive_DMA>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	2b01      	cmp	r3, #1
 8003950:	d125      	bne.n	800399e <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	617b      	str	r3, [r7, #20]
   return(result);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f043 0310 	orr.w	r3, r3, #16
 800397e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003988:	627a      	str	r2, [r7, #36]	@ 0x24
 800398a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6a39      	ldr	r1, [r7, #32]
 800398e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	61fb      	str	r3, [r7, #28]
   return(result);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e5      	bne.n	8003968 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800399c:	e002      	b.n	80039a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80039a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039a8:	e000      	b.n	80039ac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3730      	adds	r7, #48	@ 0x30
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b0ba      	sub	sp, #232	@ 0xe8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_UART_IRQHandler+0x66>
 8003a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fda2 	bl	800455c <UART_Receive_IT>
      return;
 8003a18:	e273      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80de 	beq.w	8003be0 <HAL_UART_IRQHandler+0x22c>
 8003a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80d1 	beq.w	8003be0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_UART_IRQHandler+0xae>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_UART_IRQHandler+0xf6>
 8003a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d011      	beq.n	8003ada <HAL_UART_IRQHandler+0x126>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	f043 0208 	orr.w	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 820a 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_UART_IRQHandler+0x14e>
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fd2d 	bl	800455c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0c:	2b40      	cmp	r3, #64	@ 0x40
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_UART_IRQHandler+0x17a>
 8003b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d04f      	beq.n	8003bce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fc38 	bl	80043a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3e:	2b40      	cmp	r3, #64	@ 0x40
 8003b40:	d141      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3314      	adds	r3, #20
 8003b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1d9      	bne.n	8003b42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d013      	beq.n	8003bbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9a:	4a8a      	ldr	r2, [pc, #552]	@ (8003dc4 <HAL_UART_IRQHandler+0x410>)
 8003b9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fa4a 	bl	800203c <HAL_DMA_Abort_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e00e      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9c0 	bl	8003f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	e00a      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f9bc 	bl	8003f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	e006      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f9b8 	bl	8003f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bda:	e18d      	b.n	8003ef8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	bf00      	nop
    return;
 8003bde:	e18b      	b.n	8003ef8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f040 8167 	bne.w	8003eb8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8160 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8159 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c26:	2b40      	cmp	r3, #64	@ 0x40
 8003c28:	f040 80ce 	bne.w	8003dc8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80a9 	beq.w	8003d94 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	f080 80a2 	bcs.w	8003d94 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c62:	f000 8088 	beq.w	8003d76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1d9      	bne.n	8003c66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e1      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e3      	bne.n	8003cee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e3      	bne.n	8003d34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe f8f3 	bl	8001f5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 ffed 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003d92:	e0b3      	b.n	8003efc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	f040 80ad 	bne.w	8003efc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dac:	f040 80a6 	bne.w	8003efc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 ffd5 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
      return;
 8003dc2:	e09b      	b.n	8003efc <HAL_UART_IRQHandler+0x548>
 8003dc4:	0800446b 	.word	0x0800446b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 808e 	beq.w	8003f00 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8089 	beq.w	8003f00 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e3      	bne.n	8003dee <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	623b      	str	r3, [r7, #32]
   return(result);
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e3      	bne.n	8003e26 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0310 	bic.w	r3, r3, #16
 8003e82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e90:	61fa      	str	r2, [r7, #28]
 8003e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	69b9      	ldr	r1, [r7, #24]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e3      	bne.n	8003e6c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 ff5b 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eb6:	e023      	b.n	8003f00 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x524>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fadb 	bl	800448c <UART_Transmit_IT>
    return;
 8003ed6:	e014      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <HAL_UART_IRQHandler+0x54e>
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fb1b 	bl	800452c <UART_EndTransmit_IT>
    return;
 8003ef6:	e004      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
    return;
 8003ef8:	bf00      	nop
 8003efa:	e002      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
      return;
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <HAL_UART_IRQHandler+0x54e>
      return;
 8003f00:	bf00      	nop
  }
}
 8003f02:	37e8      	adds	r7, #232	@ 0xe8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b09c      	sub	sp, #112	@ 0x70
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d172      	bne.n	800405a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f76:	2200      	movs	r2, #0
 8003f78:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f9c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e5      	bne.n	8003f7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fce:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004002:	633a      	str	r2, [r7, #48]	@ 0x30
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	2b01      	cmp	r3, #1
 8004024:	d119      	bne.n	800405a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	60fb      	str	r3, [r7, #12]
   return(result);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f023 0310 	bic.w	r3, r3, #16
 800403c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800403e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004046:	61fa      	str	r2, [r7, #28]
 8004048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	69b9      	ldr	r1, [r7, #24]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	617b      	str	r3, [r7, #20]
   return(result);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800405a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800405c:	2200      	movs	r2, #0
 800405e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800406a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800406c:	4619      	mov	r1, r3
 800406e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004070:	f000 fe7c 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004074:	e002      	b.n	800407c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004076:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004078:	f7ff ff50 	bl	8003f1c <HAL_UART_RxCpltCallback>
}
 800407c:	bf00      	nop
 800407e:	3770      	adds	r7, #112	@ 0x70
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004090:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409c:	2b01      	cmp	r3, #1
 800409e:	d108      	bne.n	80040b2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4619      	mov	r1, r3
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fe5e 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040b0:	e002      	b.n	80040b8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff ff3c 	bl	8003f30 <HAL_UART_RxHalfCpltCallback>
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b21      	cmp	r3, #33	@ 0x21
 80040f2:	d108      	bne.n	8004106 <UART_DMAError+0x46>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2200      	movs	r2, #0
 80040fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004100:	68b8      	ldr	r0, [r7, #8]
 8004102:	f000 f927 	bl	8004354 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004110:	2b40      	cmp	r3, #64	@ 0x40
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b22      	cmp	r3, #34	@ 0x22
 8004126:	d108      	bne.n	800413a <UART_DMAError+0x7a>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2200      	movs	r2, #0
 8004132:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004134:	68b8      	ldr	r0, [r7, #8]
 8004136:	f000 f935 	bl	80043a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f043 0210 	orr.w	r2, r3, #16
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004146:	68b8      	ldr	r0, [r7, #8]
 8004148:	f7ff fefc 	bl	8003f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004164:	e03b      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d037      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fc ff67 	bl	8001040 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <UART_WaitOnFlagUntilTimeout+0x30>
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e03a      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d023      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b80      	cmp	r3, #128	@ 0x80
 800419a:	d020      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b40      	cmp	r3, #64	@ 0x40
 80041a0:	d01d      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d116      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f8ec 	bl	80043a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2208      	movs	r2, #8
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00f      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d0b4      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b098      	sub	sp, #96	@ 0x60
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	88fa      	ldrh	r2, [r7, #6]
 8004220:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2222      	movs	r2, #34	@ 0x22
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	4a44      	ldr	r2, [pc, #272]	@ (8004348 <UART_Start_Receive_DMA+0x140>)
 8004236:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	4a43      	ldr	r2, [pc, #268]	@ (800434c <UART_Start_Receive_DMA+0x144>)
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	4a42      	ldr	r2, [pc, #264]	@ (8004350 <UART_Start_Receive_DMA+0x148>)
 8004246:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424c:	2200      	movs	r2, #0
 800424e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004250:	f107 0308 	add.w	r3, r7, #8
 8004254:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	f7fd fe20 	bl	8001eac <HAL_DMA_Start_IT>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2210      	movs	r2, #16
 8004276:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e05d      	b.n	8004340 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d019      	beq.n	80042d6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042c2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80042c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80042c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80042d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e5      	bne.n	80042a2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3314      	adds	r3, #20
 80042f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042f6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80042f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80042fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e5      	bne.n	80042d6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	617b      	str	r3, [r7, #20]
   return(result);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004320:	653b      	str	r3, [r7, #80]	@ 0x50
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3314      	adds	r3, #20
 8004328:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800432a:	627a      	str	r2, [r7, #36]	@ 0x24
 800432c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6a39      	ldr	r1, [r7, #32]
 8004330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	61fb      	str	r3, [r7, #28]
   return(result);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e5      	bne.n	800430a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3760      	adds	r7, #96	@ 0x60
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	08003f59 	.word	0x08003f59
 800434c:	08004085 	.word	0x08004085
 8004350:	080040c1 	.word	0x080040c1

08004354 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004354:	b480      	push	{r7}
 8004356:	b089      	sub	sp, #36	@ 0x24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	60bb      	str	r3, [r7, #8]
   return(result);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	61ba      	str	r2, [r7, #24]
 800437e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6979      	ldr	r1, [r7, #20]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	613b      	str	r3, [r7, #16]
   return(result);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e5      	bne.n	800435c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004398:	bf00      	nop
 800439a:	3724      	adds	r7, #36	@ 0x24
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b095      	sub	sp, #84	@ 0x54
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d119      	bne.n	8004450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60bb      	str	r3, [r7, #8]
   return(result);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	647b      	str	r3, [r7, #68]	@ 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800443c:	61ba      	str	r2, [r7, #24]
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e5      	bne.n	800441c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800445e:	bf00      	nop
 8004460:	3754      	adds	r7, #84	@ 0x54
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff fd60 	bl	8003f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b21      	cmp	r3, #33	@ 0x21
 800449e:	d13e      	bne.n	800451e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a8:	d114      	bne.n	80044d4 <UART_Transmit_IT+0x48>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d110      	bne.n	80044d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	1c9a      	adds	r2, r3, #2
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]
 80044d2:	e008      	b.n	80044e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	1c59      	adds	r1, r3, #1
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6211      	str	r1, [r2, #32]
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	4619      	mov	r1, r3
 80044f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004508:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004518:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e000      	b.n	8004520 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800451e:	2302      	movs	r3, #2
  }
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004542:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff fcdb 	bl	8003f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08c      	sub	sp, #48	@ 0x30
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b22      	cmp	r3, #34	@ 0x22
 8004576:	f040 80aa 	bne.w	80046ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004582:	d115      	bne.n	80045b0 <UART_Receive_IT+0x54>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d111      	bne.n	80045b0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	b29a      	uxth	r2, r3
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a8:	1c9a      	adds	r2, r3, #2
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80045ae:	e024      	b.n	80045fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045be:	d007      	beq.n	80045d0 <UART_Receive_IT+0x74>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <UART_Receive_IT+0x82>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	e008      	b.n	80045f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29b      	uxth	r3, r3
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	4619      	mov	r1, r3
 8004608:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800460a:	2b00      	cmp	r3, #0
 800460c:	d15d      	bne.n	80046ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0220 	bic.w	r2, r2, #32
 800461c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800462c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d135      	bne.n	80046c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	613b      	str	r3, [r7, #16]
   return(result);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f023 0310 	bic.w	r3, r3, #16
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467a:	623a      	str	r2, [r7, #32]
 800467c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	69f9      	ldr	r1, [r7, #28]
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	61bb      	str	r3, [r7, #24]
   return(result);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b10      	cmp	r3, #16
 800469a:	d10a      	bne.n	80046b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fb57 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
 80046be:	e002      	b.n	80046c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fc2b 	bl	8003f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e002      	b.n	80046d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e000      	b.n	80046d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3730      	adds	r7, #48	@ 0x30
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046dc:	b0c0      	sub	sp, #256	@ 0x100
 80046de:	af00      	add	r7, sp, #0
 80046e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f4:	68d9      	ldr	r1, [r3, #12]
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	ea40 0301 	orr.w	r3, r0, r1
 8004700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	431a      	orrs	r2, r3
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004730:	f021 010c 	bic.w	r1, r1, #12
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800473e:	430b      	orrs	r3, r1
 8004740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004752:	6999      	ldr	r1, [r3, #24]
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	ea40 0301 	orr.w	r3, r0, r1
 800475e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b8f      	ldr	r3, [pc, #572]	@ (80049a4 <UART_SetConfig+0x2cc>)
 8004768:	429a      	cmp	r2, r3
 800476a:	d005      	beq.n	8004778 <UART_SetConfig+0xa0>
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b8d      	ldr	r3, [pc, #564]	@ (80049a8 <UART_SetConfig+0x2d0>)
 8004774:	429a      	cmp	r2, r3
 8004776:	d104      	bne.n	8004782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fd40 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 800477c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004780:	e003      	b.n	800478a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004782:	f7fe fd27 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8004786:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004794:	f040 810c 	bne.w	80049b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800479c:	2200      	movs	r2, #0
 800479e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	1891      	adds	r1, r2, r2
 80047b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047b2:	415b      	adcs	r3, r3
 80047b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047ba:	4621      	mov	r1, r4
 80047bc:	eb12 0801 	adds.w	r8, r2, r1
 80047c0:	4629      	mov	r1, r5
 80047c2:	eb43 0901 	adc.w	r9, r3, r1
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047da:	4690      	mov	r8, r2
 80047dc:	4699      	mov	r9, r3
 80047de:	4623      	mov	r3, r4
 80047e0:	eb18 0303 	adds.w	r3, r8, r3
 80047e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047e8:	462b      	mov	r3, r5
 80047ea:	eb49 0303 	adc.w	r3, r9, r3
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004806:	460b      	mov	r3, r1
 8004808:	18db      	adds	r3, r3, r3
 800480a:	653b      	str	r3, [r7, #80]	@ 0x50
 800480c:	4613      	mov	r3, r2
 800480e:	eb42 0303 	adc.w	r3, r2, r3
 8004812:	657b      	str	r3, [r7, #84]	@ 0x54
 8004814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800481c:	f7fb fd30 	bl	8000280 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b61      	ldr	r3, [pc, #388]	@ (80049ac <UART_SetConfig+0x2d4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004838:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800483c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004848:	415b      	adcs	r3, r3
 800484a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800484c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004850:	4641      	mov	r1, r8
 8004852:	eb12 0a01 	adds.w	sl, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb43 0b01 	adc.w	fp, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800486c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004870:	4692      	mov	sl, r2
 8004872:	469b      	mov	fp, r3
 8004874:	4643      	mov	r3, r8
 8004876:	eb1a 0303 	adds.w	r3, sl, r3
 800487a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800487e:	464b      	mov	r3, r9
 8004880:	eb4b 0303 	adc.w	r3, fp, r3
 8004884:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004894:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800489c:	460b      	mov	r3, r1
 800489e:	18db      	adds	r3, r3, r3
 80048a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80048a2:	4613      	mov	r3, r2
 80048a4:	eb42 0303 	adc.w	r3, r2, r3
 80048a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048b2:	f7fb fce5 	bl	8000280 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	4b3b      	ldr	r3, [pc, #236]	@ (80049ac <UART_SetConfig+0x2d4>)
 80048be:	fba3 2301 	umull	r2, r3, r3, r1
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2264      	movs	r2, #100	@ 0x64
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	1acb      	subs	r3, r1, r3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048d2:	4b36      	ldr	r3, [pc, #216]	@ (80049ac <UART_SetConfig+0x2d4>)
 80048d4:	fba3 2302 	umull	r2, r3, r3, r2
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048e0:	441c      	add	r4, r3
 80048e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048fc:	415b      	adcs	r3, r3
 80048fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004904:	4641      	mov	r1, r8
 8004906:	1851      	adds	r1, r2, r1
 8004908:	6339      	str	r1, [r7, #48]	@ 0x30
 800490a:	4649      	mov	r1, r9
 800490c:	414b      	adcs	r3, r1
 800490e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800491c:	4659      	mov	r1, fp
 800491e:	00cb      	lsls	r3, r1, #3
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004926:	4651      	mov	r1, sl
 8004928:	00ca      	lsls	r2, r1, #3
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	4603      	mov	r3, r0
 8004930:	4642      	mov	r2, r8
 8004932:	189b      	adds	r3, r3, r2
 8004934:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004938:	464b      	mov	r3, r9
 800493a:	460a      	mov	r2, r1
 800493c:	eb42 0303 	adc.w	r3, r2, r3
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004950:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004958:	460b      	mov	r3, r1
 800495a:	18db      	adds	r3, r3, r3
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800495e:	4613      	mov	r3, r2
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800496a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800496e:	f7fb fc87 	bl	8000280 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4b0d      	ldr	r3, [pc, #52]	@ (80049ac <UART_SetConfig+0x2d4>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	@ 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3332      	adds	r3, #50	@ 0x32
 800498a:	4a08      	ldr	r2, [pc, #32]	@ (80049ac <UART_SetConfig+0x2d4>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 0207 	and.w	r2, r3, #7
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4422      	add	r2, r4
 800499e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a0:	e106      	b.n	8004bb0 <UART_SetConfig+0x4d8>
 80049a2:	bf00      	nop
 80049a4:	40011000 	.word	0x40011000
 80049a8:	40011400 	.word	0x40011400
 80049ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049c2:	4642      	mov	r2, r8
 80049c4:	464b      	mov	r3, r9
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	6239      	str	r1, [r7, #32]
 80049ca:	415b      	adcs	r3, r3
 80049cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049d2:	4641      	mov	r1, r8
 80049d4:	1854      	adds	r4, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb43 0501 	adc.w	r5, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	00eb      	lsls	r3, r5, #3
 80049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	18e3      	adds	r3, r4, r3
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049f8:	464b      	mov	r3, r9
 80049fa:	eb45 0303 	adc.w	r3, r5, r3
 80049fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a1e:	4629      	mov	r1, r5
 8004a20:	008b      	lsls	r3, r1, #2
 8004a22:	4621      	mov	r1, r4
 8004a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a28:	4621      	mov	r1, r4
 8004a2a:	008a      	lsls	r2, r1, #2
 8004a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a30:	f7fb fc26 	bl	8000280 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4b60      	ldr	r3, [pc, #384]	@ (8004bbc <UART_SetConfig+0x4e4>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	011c      	lsls	r4, r3, #4
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	1891      	adds	r1, r2, r2
 8004a5a:	61b9      	str	r1, [r7, #24]
 8004a5c:	415b      	adcs	r3, r3
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a64:	4641      	mov	r1, r8
 8004a66:	1851      	adds	r1, r2, r1
 8004a68:	6139      	str	r1, [r7, #16]
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	414b      	adcs	r3, r1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	00cb      	lsls	r3, r1, #3
 8004a80:	4651      	mov	r1, sl
 8004a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a86:	4651      	mov	r1, sl
 8004a88:	00ca      	lsls	r2, r1, #3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4642      	mov	r2, r8
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a98:	464b      	mov	r3, r9
 8004a9a:	460a      	mov	r2, r1
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004aae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004abc:	4649      	mov	r1, r9
 8004abe:	008b      	lsls	r3, r1, #2
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	008a      	lsls	r2, r1, #2
 8004aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ace:	f7fb fbd7 	bl	8000280 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4b38      	ldr	r3, [pc, #224]	@ (8004bbc <UART_SetConfig+0x4e4>)
 8004ada:	fba3 2301 	umull	r2, r3, r3, r1
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2264      	movs	r2, #100	@ 0x64
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	1acb      	subs	r3, r1, r3
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	3332      	adds	r3, #50	@ 0x32
 8004aec:	4a33      	ldr	r2, [pc, #204]	@ (8004bbc <UART_SetConfig+0x4e4>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004af8:	441c      	add	r4, r3
 8004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004afe:	2200      	movs	r2, #0
 8004b00:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b02:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	415b      	adcs	r3, r3
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b18:	4641      	mov	r1, r8
 8004b1a:	1851      	adds	r1, r2, r1
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	4649      	mov	r1, r9
 8004b20:	414b      	adcs	r3, r1
 8004b22:	607b      	str	r3, [r7, #4]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b30:	4659      	mov	r1, fp
 8004b32:	00cb      	lsls	r3, r1, #3
 8004b34:	4651      	mov	r1, sl
 8004b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	00ca      	lsls	r2, r1, #3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	4642      	mov	r2, r8
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	460a      	mov	r2, r1
 8004b4e:	eb42 0303 	adc.w	r3, r2, r3
 8004b52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	008b      	lsls	r3, r1, #2
 8004b70:	4641      	mov	r1, r8
 8004b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b76:	4641      	mov	r1, r8
 8004b78:	008a      	lsls	r2, r1, #2
 8004b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b7e:	f7fb fb7f 	bl	8000280 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <UART_SetConfig+0x4e4>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	2164      	movs	r1, #100	@ 0x64
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	3332      	adds	r3, #50	@ 0x32
 8004b9a:	4a08      	ldr	r2, [pc, #32]	@ (8004bbc <UART_SetConfig+0x4e4>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	f003 020f 	and.w	r2, r3, #15
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4422      	add	r2, r4
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bbc:	51eb851f 	.word	0x51eb851f

08004bc0 <main_system_loop>:
volatile system_states_t system_state = SYS_STATE_IDLE;


uint16_t adc_buf = 0x00U;

void main_system_loop(void) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0

	switch (system_state) {
 8004bc4:	4b16      	ldr	r3, [pc, #88]	@ (8004c20 <main_system_loop+0x60>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d014      	beq.n	8004bf8 <main_system_loop+0x38>
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	dc19      	bgt.n	8004c06 <main_system_loop+0x46>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01e      	beq.n	8004c14 <main_system_loop+0x54>
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d115      	bne.n	8004c06 <main_system_loop+0x46>
	case SYS_STATE_IDLE:

		break;
	case SYS_STATE_RUNNING:
		if (timer_logger_flag) {
 8004bda:	4b12      	ldr	r3, [pc, #72]	@ (8004c24 <main_system_loop+0x64>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d019      	beq.n	8004c18 <main_system_loop+0x58>
			printf("adc_value : %u \r\n", adc_buf);
 8004be4:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <main_system_loop+0x68>)
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	4619      	mov	r1, r3
 8004bea:	4810      	ldr	r0, [pc, #64]	@ (8004c2c <main_system_loop+0x6c>)
 8004bec:	f000 f9d4 	bl	8004f98 <iprintf>
			timer_logger_flag = 0x00U;
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <main_system_loop+0x64>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
		}

		break;
 8004bf6:	e00f      	b.n	8004c18 <main_system_loop+0x58>
	case SYS_STATE_ERROR:
		printf("Error\r\n");
 8004bf8:	480d      	ldr	r0, [pc, #52]	@ (8004c30 <main_system_loop+0x70>)
 8004bfa:	f000 fa35 	bl	8005068 <puts>
		system_state = SYS_STATE_IDLE;
 8004bfe:	4b08      	ldr	r3, [pc, #32]	@ (8004c20 <main_system_loop+0x60>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
		break;
 8004c04:	e009      	b.n	8004c1a <main_system_loop+0x5a>

	default:
		printf("Unexpected system state\r\n");
 8004c06:	480b      	ldr	r0, [pc, #44]	@ (8004c34 <main_system_loop+0x74>)
 8004c08:	f000 fa2e 	bl	8005068 <puts>
		system_state = SYS_STATE_IDLE;
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <main_system_loop+0x60>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
		break;
 8004c12:	e002      	b.n	8004c1a <main_system_loop+0x5a>
		break;
 8004c14:	bf00      	nop
 8004c16:	e000      	b.n	8004c1a <main_system_loop+0x5a>
		break;
 8004c18:	bf00      	nop
//
//		printf("callback for print adc valued \r\n");
//		timer_logger_flag = 0x00;
//	}

}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	2000028e 	.word	0x2000028e
 8004c24:	2000028d 	.word	0x2000028d
 8004c28:	20000290 	.word	0x20000290
 8004c2c:	08005d68 	.word	0x08005d68
 8004c30:	08005d7c 	.word	0x08005d7c
 8004c34:	08005d84 	.word	0x08005d84

08004c38 <adc_start_mesure>:

system_module_error_t adc_start_mesure(void) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_Start_IT(&htim10) != HAL_OK){
 8004c3c:	480f      	ldr	r0, [pc, #60]	@ (8004c7c <adc_start_mesure+0x44>)
 8004c3e:	f7fe fb41 	bl	80032c4 <HAL_TIM_Base_Start_IT>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <adc_start_mesure+0x14>
		return SYSTEM_ERROR_TIM10;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e014      	b.n	8004c76 <adc_start_mesure+0x3e>
	}
	if (HAL_TIM_Base_Start_IT(&htim11) != HAL_OK){
 8004c4c:	480c      	ldr	r0, [pc, #48]	@ (8004c80 <adc_start_mesure+0x48>)
 8004c4e:	f7fe fb39 	bl	80032c4 <HAL_TIM_Base_Start_IT>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <adc_start_mesure+0x24>
		return SYSTEM_ERROR_TIM11;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e00c      	b.n	8004c76 <adc_start_mesure+0x3e>
	}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 1) != HAL_OK){
 8004c5c:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <adc_start_mesure+0x4c>)
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	2201      	movs	r2, #1
 8004c62:	4619      	mov	r1, r3
 8004c64:	4808      	ldr	r0, [pc, #32]	@ (8004c88 <adc_start_mesure+0x50>)
 8004c66:	f7fc fb4b 	bl	8001300 <HAL_ADC_Start_DMA>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <adc_start_mesure+0x3c>
		return SYSTEM_ERROR_ADC;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e000      	b.n	8004c76 <adc_start_mesure+0x3e>
	}
	return SYSTEM_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000012c 	.word	0x2000012c
 8004c80:	20000174 	.word	0x20000174
 8004c84:	20000290 	.word	0x20000290
 8004c88:	20000084 	.word	0x20000084

08004c8c <adc_stop_mesure>:

system_module_error_t adc_stop_mesure(void) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_Stop_IT(&htim10) != HAL_OK){
 8004c90:	480d      	ldr	r0, [pc, #52]	@ (8004cc8 <adc_stop_mesure+0x3c>)
 8004c92:	f7fe fb79 	bl	8003388 <HAL_TIM_Base_Stop_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <adc_stop_mesure+0x14>
		return SYSTEM_ERROR_TIM10;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e010      	b.n	8004cc2 <adc_stop_mesure+0x36>
	}
	if (HAL_TIM_Base_Stop_IT(&htim11) != HAL_OK){
 8004ca0:	480a      	ldr	r0, [pc, #40]	@ (8004ccc <adc_stop_mesure+0x40>)
 8004ca2:	f7fe fb71 	bl	8003388 <HAL_TIM_Base_Stop_IT>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <adc_stop_mesure+0x24>
		return SYSTEM_ERROR_TIM11;
 8004cac:	2302      	movs	r3, #2
 8004cae:	e008      	b.n	8004cc2 <adc_stop_mesure+0x36>
	}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK){
 8004cb0:	4807      	ldr	r0, [pc, #28]	@ (8004cd0 <adc_stop_mesure+0x44>)
 8004cb2:	f7fc fc19 	bl	80014e8 <HAL_ADC_Stop_DMA>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <adc_stop_mesure+0x34>
		return SYSTEM_ERROR_ADC;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e000      	b.n	8004cc2 <adc_stop_mesure+0x36>
	}
	return SYSTEM_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	2000012c 	.word	0x2000012c
 8004ccc:	20000174 	.word	0x20000174
 8004cd0:	20000084 	.word	0x20000084

08004cd4 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	if (htim == &htim10) {
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a09      	ldr	r2, [pc, #36]	@ (8004d04 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d102      	bne.n	8004cea <HAL_TIM_PeriodElapsedCallback+0x16>
		timer_logger_flag = 0x01U;
 8004ce4:	4b08      	ldr	r3, [pc, #32]	@ (8004d08 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
	}
	if (htim == &htim11) {
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a07      	ldr	r2, [pc, #28]	@ (8004d0c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d104      	bne.n	8004cfc <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_ADC_Start_DMA(&hadc1, &adc_buf, 1);
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	4906      	ldr	r1, [pc, #24]	@ (8004d10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004cf6:	4807      	ldr	r0, [pc, #28]	@ (8004d14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004cf8:	f7fc fb02 	bl	8001300 <HAL_ADC_Start_DMA>
	}
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	2000012c 	.word	0x2000012c
 8004d08:	2000028d 	.word	0x2000028d
 8004d0c:	20000174 	.word	0x20000174
 8004d10:	20000290 	.word	0x20000290
 8004d14:	20000084 	.word	0x20000084

08004d18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d28:	d116      	bne.n	8004d58 <HAL_GPIO_EXTI_Callback+0x40>
		user_btn_flag = 0x01U;
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d60 <HAL_GPIO_EXTI_Callback+0x48>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004d30:	2120      	movs	r1, #32
 8004d32:	480c      	ldr	r0, [pc, #48]	@ (8004d64 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004d34:	f7fd fdab 	bl	800288e <HAL_GPIO_TogglePin>
		if (system_state == SYS_STATE_RUNNING){
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_GPIO_EXTI_Callback+0x50>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d105      	bne.n	8004d4e <HAL_GPIO_EXTI_Callback+0x36>
			adc_stop_mesure();
 8004d42:	f7ff ffa3 	bl	8004c8c <adc_stop_mesure>
			system_state = SYS_STATE_IDLE;
 8004d46:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <HAL_GPIO_EXTI_Callback+0x50>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
			adc_start_mesure();
			system_state = SYS_STATE_RUNNING;
		}

	}
}
 8004d4c:	e004      	b.n	8004d58 <HAL_GPIO_EXTI_Callback+0x40>
			adc_start_mesure();
 8004d4e:	f7ff ff73 	bl	8004c38 <adc_start_mesure>
			system_state = SYS_STATE_RUNNING;
 8004d52:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <HAL_GPIO_EXTI_Callback+0x50>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	2000028c 	.word	0x2000028c
 8004d64:	40020000 	.word	0x40020000
 8004d68:	2000028e 	.word	0x2000028e

08004d6c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]

	if (huart == &huart2) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004de8 <HAL_UARTEx_RxEventCallback+0x7c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d12f      	bne.n	8004de0 <HAL_UARTEx_RxEventCallback+0x74>
		printf("size %d \r\n", Size);
 8004d80:	887b      	ldrh	r3, [r7, #2]
 8004d82:	4619      	mov	r1, r3
 8004d84:	4819      	ldr	r0, [pc, #100]	@ (8004dec <HAL_UARTEx_RxEventCallback+0x80>)
 8004d86:	f000 f907 	bl	8004f98 <iprintf>
		if (strncmp(rx_buffer, "start", 5) == 0) {
 8004d8a:	2205      	movs	r2, #5
 8004d8c:	4918      	ldr	r1, [pc, #96]	@ (8004df0 <HAL_UARTEx_RxEventCallback+0x84>)
 8004d8e:	4819      	ldr	r0, [pc, #100]	@ (8004df4 <HAL_UARTEx_RxEventCallback+0x88>)
 8004d90:	f000 fa52 	bl	8005238 <strncmp>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10c      	bne.n	8004db4 <HAL_UARTEx_RxEventCallback+0x48>
			if (adc_start_mesure() != SYSTEM_OK) {
 8004d9a:	f7ff ff4d 	bl	8004c38 <adc_start_mesure>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_UARTEx_RxEventCallback+0x40>
				system_state = SYS_STATE_ERROR;
 8004da4:	4b14      	ldr	r3, [pc, #80]	@ (8004df8 <HAL_UARTEx_RxEventCallback+0x8c>)
 8004da6:	2202      	movs	r2, #2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e014      	b.n	8004dd6 <HAL_UARTEx_RxEventCallback+0x6a>
			} else {
				system_state = SYS_STATE_RUNNING;
 8004dac:	4b12      	ldr	r3, [pc, #72]	@ (8004df8 <HAL_UARTEx_RxEventCallback+0x8c>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e010      	b.n	8004dd6 <HAL_UARTEx_RxEventCallback+0x6a>
			}

		} else if (strncmp(rx_buffer, "stop", 4) == 0) {
 8004db4:	2204      	movs	r2, #4
 8004db6:	4911      	ldr	r1, [pc, #68]	@ (8004dfc <HAL_UARTEx_RxEventCallback+0x90>)
 8004db8:	480e      	ldr	r0, [pc, #56]	@ (8004df4 <HAL_UARTEx_RxEventCallback+0x88>)
 8004dba:	f000 fa3d 	bl	8005238 <strncmp>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d105      	bne.n	8004dd0 <HAL_UARTEx_RxEventCallback+0x64>
			adc_stop_mesure();
 8004dc4:	f7ff ff62 	bl	8004c8c <adc_stop_mesure>
			system_state = SYS_STATE_IDLE;
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <HAL_UARTEx_RxEventCallback+0x8c>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e002      	b.n	8004dd6 <HAL_UARTEx_RxEventCallback+0x6a>
		} else {
			system_state = SYS_STATE_ERROR;
 8004dd0:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <HAL_UARTEx_RxEventCallback+0x8c>)
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	701a      	strb	r2, [r3, #0]

		}

		HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buffer, RX_BUFF_SIZE);
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	4906      	ldr	r1, [pc, #24]	@ (8004df4 <HAL_UARTEx_RxEventCallback+0x88>)
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fe fd91 	bl	8003902 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	200001bc 	.word	0x200001bc
 8004dec:	08005da0 	.word	0x08005da0
 8004df0:	08005dac 	.word	0x08005dac
 8004df4:	20000264 	.word	0x20000264
 8004df8:	2000028e 	.word	0x2000028e
 8004dfc:	08005db4 	.word	0x08005db4

08004e00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <std>:
 8004e14:	2300      	movs	r3, #0
 8004e16:	b510      	push	{r4, lr}
 8004e18:	4604      	mov	r4, r0
 8004e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e22:	6083      	str	r3, [r0, #8]
 8004e24:	8181      	strh	r1, [r0, #12]
 8004e26:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e28:	81c2      	strh	r2, [r0, #14]
 8004e2a:	6183      	str	r3, [r0, #24]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	2208      	movs	r2, #8
 8004e30:	305c      	adds	r0, #92	@ 0x5c
 8004e32:	f000 f9f9 	bl	8005228 <memset>
 8004e36:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <std+0x58>)
 8004e38:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <std+0x5c>)
 8004e3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <std+0x60>)
 8004e40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e42:	4b0d      	ldr	r3, [pc, #52]	@ (8004e78 <std+0x64>)
 8004e44:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <std+0x68>)
 8004e48:	6224      	str	r4, [r4, #32]
 8004e4a:	429c      	cmp	r4, r3
 8004e4c:	d006      	beq.n	8004e5c <std+0x48>
 8004e4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e52:	4294      	cmp	r4, r2
 8004e54:	d002      	beq.n	8004e5c <std+0x48>
 8004e56:	33d0      	adds	r3, #208	@ 0xd0
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	d105      	bne.n	8004e68 <std+0x54>
 8004e5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e64:	f000 ba6a 	b.w	800533c <__retarget_lock_init_recursive>
 8004e68:	bd10      	pop	{r4, pc}
 8004e6a:	bf00      	nop
 8004e6c:	08005079 	.word	0x08005079
 8004e70:	0800509b 	.word	0x0800509b
 8004e74:	080050d3 	.word	0x080050d3
 8004e78:	080050f7 	.word	0x080050f7
 8004e7c:	20000294 	.word	0x20000294

08004e80 <stdio_exit_handler>:
 8004e80:	4a02      	ldr	r2, [pc, #8]	@ (8004e8c <stdio_exit_handler+0xc>)
 8004e82:	4903      	ldr	r1, [pc, #12]	@ (8004e90 <stdio_exit_handler+0x10>)
 8004e84:	4803      	ldr	r0, [pc, #12]	@ (8004e94 <stdio_exit_handler+0x14>)
 8004e86:	f000 b869 	b.w	8004f5c <_fwalk_sglue>
 8004e8a:	bf00      	nop
 8004e8c:	2000000c 	.word	0x2000000c
 8004e90:	08005bd9 	.word	0x08005bd9
 8004e94:	2000001c 	.word	0x2000001c

08004e98 <cleanup_stdio>:
 8004e98:	6841      	ldr	r1, [r0, #4]
 8004e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ecc <cleanup_stdio+0x34>)
 8004e9c:	4299      	cmp	r1, r3
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	d001      	beq.n	8004ea8 <cleanup_stdio+0x10>
 8004ea4:	f000 fe98 	bl	8005bd8 <_fflush_r>
 8004ea8:	68a1      	ldr	r1, [r4, #8]
 8004eaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <cleanup_stdio+0x38>)
 8004eac:	4299      	cmp	r1, r3
 8004eae:	d002      	beq.n	8004eb6 <cleanup_stdio+0x1e>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 fe91 	bl	8005bd8 <_fflush_r>
 8004eb6:	68e1      	ldr	r1, [r4, #12]
 8004eb8:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <cleanup_stdio+0x3c>)
 8004eba:	4299      	cmp	r1, r3
 8004ebc:	d004      	beq.n	8004ec8 <cleanup_stdio+0x30>
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec4:	f000 be88 	b.w	8005bd8 <_fflush_r>
 8004ec8:	bd10      	pop	{r4, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000294 	.word	0x20000294
 8004ed0:	200002fc 	.word	0x200002fc
 8004ed4:	20000364 	.word	0x20000364

08004ed8 <global_stdio_init.part.0>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	4b0b      	ldr	r3, [pc, #44]	@ (8004f08 <global_stdio_init.part.0+0x30>)
 8004edc:	4c0b      	ldr	r4, [pc, #44]	@ (8004f0c <global_stdio_init.part.0+0x34>)
 8004ede:	4a0c      	ldr	r2, [pc, #48]	@ (8004f10 <global_stdio_init.part.0+0x38>)
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	f7ff ff94 	bl	8004e14 <std>
 8004eec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	2109      	movs	r1, #9
 8004ef4:	f7ff ff8e 	bl	8004e14 <std>
 8004ef8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004efc:	2202      	movs	r2, #2
 8004efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f02:	2112      	movs	r1, #18
 8004f04:	f7ff bf86 	b.w	8004e14 <std>
 8004f08:	200003cc 	.word	0x200003cc
 8004f0c:	20000294 	.word	0x20000294
 8004f10:	08004e81 	.word	0x08004e81

08004f14 <__sfp_lock_acquire>:
 8004f14:	4801      	ldr	r0, [pc, #4]	@ (8004f1c <__sfp_lock_acquire+0x8>)
 8004f16:	f000 ba12 	b.w	800533e <__retarget_lock_acquire_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	200003d5 	.word	0x200003d5

08004f20 <__sfp_lock_release>:
 8004f20:	4801      	ldr	r0, [pc, #4]	@ (8004f28 <__sfp_lock_release+0x8>)
 8004f22:	f000 ba0d 	b.w	8005340 <__retarget_lock_release_recursive>
 8004f26:	bf00      	nop
 8004f28:	200003d5 	.word	0x200003d5

08004f2c <__sinit>:
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	4604      	mov	r4, r0
 8004f30:	f7ff fff0 	bl	8004f14 <__sfp_lock_acquire>
 8004f34:	6a23      	ldr	r3, [r4, #32]
 8004f36:	b11b      	cbz	r3, 8004f40 <__sinit+0x14>
 8004f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f3c:	f7ff bff0 	b.w	8004f20 <__sfp_lock_release>
 8004f40:	4b04      	ldr	r3, [pc, #16]	@ (8004f54 <__sinit+0x28>)
 8004f42:	6223      	str	r3, [r4, #32]
 8004f44:	4b04      	ldr	r3, [pc, #16]	@ (8004f58 <__sinit+0x2c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f5      	bne.n	8004f38 <__sinit+0xc>
 8004f4c:	f7ff ffc4 	bl	8004ed8 <global_stdio_init.part.0>
 8004f50:	e7f2      	b.n	8004f38 <__sinit+0xc>
 8004f52:	bf00      	nop
 8004f54:	08004e99 	.word	0x08004e99
 8004f58:	200003cc 	.word	0x200003cc

08004f5c <_fwalk_sglue>:
 8004f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f60:	4607      	mov	r7, r0
 8004f62:	4688      	mov	r8, r1
 8004f64:	4614      	mov	r4, r2
 8004f66:	2600      	movs	r6, #0
 8004f68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f6c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f70:	d505      	bpl.n	8004f7e <_fwalk_sglue+0x22>
 8004f72:	6824      	ldr	r4, [r4, #0]
 8004f74:	2c00      	cmp	r4, #0
 8004f76:	d1f7      	bne.n	8004f68 <_fwalk_sglue+0xc>
 8004f78:	4630      	mov	r0, r6
 8004f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f7e:	89ab      	ldrh	r3, [r5, #12]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d907      	bls.n	8004f94 <_fwalk_sglue+0x38>
 8004f84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	d003      	beq.n	8004f94 <_fwalk_sglue+0x38>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4638      	mov	r0, r7
 8004f90:	47c0      	blx	r8
 8004f92:	4306      	orrs	r6, r0
 8004f94:	3568      	adds	r5, #104	@ 0x68
 8004f96:	e7e9      	b.n	8004f6c <_fwalk_sglue+0x10>

08004f98 <iprintf>:
 8004f98:	b40f      	push	{r0, r1, r2, r3}
 8004f9a:	b507      	push	{r0, r1, r2, lr}
 8004f9c:	4906      	ldr	r1, [pc, #24]	@ (8004fb8 <iprintf+0x20>)
 8004f9e:	ab04      	add	r3, sp, #16
 8004fa0:	6808      	ldr	r0, [r1, #0]
 8004fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa6:	6881      	ldr	r1, [r0, #8]
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	f000 faed 	bl	8005588 <_vfiprintf_r>
 8004fae:	b003      	add	sp, #12
 8004fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb4:	b004      	add	sp, #16
 8004fb6:	4770      	bx	lr
 8004fb8:	20000018 	.word	0x20000018

08004fbc <_puts_r>:
 8004fbc:	6a03      	ldr	r3, [r0, #32]
 8004fbe:	b570      	push	{r4, r5, r6, lr}
 8004fc0:	6884      	ldr	r4, [r0, #8]
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	460e      	mov	r6, r1
 8004fc6:	b90b      	cbnz	r3, 8004fcc <_puts_r+0x10>
 8004fc8:	f7ff ffb0 	bl	8004f2c <__sinit>
 8004fcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fce:	07db      	lsls	r3, r3, #31
 8004fd0:	d405      	bmi.n	8004fde <_puts_r+0x22>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	0598      	lsls	r0, r3, #22
 8004fd6:	d402      	bmi.n	8004fde <_puts_r+0x22>
 8004fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fda:	f000 f9b0 	bl	800533e <__retarget_lock_acquire_recursive>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	0719      	lsls	r1, r3, #28
 8004fe2:	d502      	bpl.n	8004fea <_puts_r+0x2e>
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d135      	bne.n	8005056 <_puts_r+0x9a>
 8004fea:	4621      	mov	r1, r4
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 f8c5 	bl	800517c <__swsetup_r>
 8004ff2:	b380      	cbz	r0, 8005056 <_puts_r+0x9a>
 8004ff4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ff8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ffa:	07da      	lsls	r2, r3, #31
 8004ffc:	d405      	bmi.n	800500a <_puts_r+0x4e>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	059b      	lsls	r3, r3, #22
 8005002:	d402      	bmi.n	800500a <_puts_r+0x4e>
 8005004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005006:	f000 f99b 	bl	8005340 <__retarget_lock_release_recursive>
 800500a:	4628      	mov	r0, r5
 800500c:	bd70      	pop	{r4, r5, r6, pc}
 800500e:	2b00      	cmp	r3, #0
 8005010:	da04      	bge.n	800501c <_puts_r+0x60>
 8005012:	69a2      	ldr	r2, [r4, #24]
 8005014:	429a      	cmp	r2, r3
 8005016:	dc17      	bgt.n	8005048 <_puts_r+0x8c>
 8005018:	290a      	cmp	r1, #10
 800501a:	d015      	beq.n	8005048 <_puts_r+0x8c>
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	6022      	str	r2, [r4, #0]
 8005022:	7019      	strb	r1, [r3, #0]
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800502a:	3b01      	subs	r3, #1
 800502c:	60a3      	str	r3, [r4, #8]
 800502e:	2900      	cmp	r1, #0
 8005030:	d1ed      	bne.n	800500e <_puts_r+0x52>
 8005032:	2b00      	cmp	r3, #0
 8005034:	da11      	bge.n	800505a <_puts_r+0x9e>
 8005036:	4622      	mov	r2, r4
 8005038:	210a      	movs	r1, #10
 800503a:	4628      	mov	r0, r5
 800503c:	f000 f85f 	bl	80050fe <__swbuf_r>
 8005040:	3001      	adds	r0, #1
 8005042:	d0d7      	beq.n	8004ff4 <_puts_r+0x38>
 8005044:	250a      	movs	r5, #10
 8005046:	e7d7      	b.n	8004ff8 <_puts_r+0x3c>
 8005048:	4622      	mov	r2, r4
 800504a:	4628      	mov	r0, r5
 800504c:	f000 f857 	bl	80050fe <__swbuf_r>
 8005050:	3001      	adds	r0, #1
 8005052:	d1e7      	bne.n	8005024 <_puts_r+0x68>
 8005054:	e7ce      	b.n	8004ff4 <_puts_r+0x38>
 8005056:	3e01      	subs	r6, #1
 8005058:	e7e4      	b.n	8005024 <_puts_r+0x68>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	6022      	str	r2, [r4, #0]
 8005060:	220a      	movs	r2, #10
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	e7ee      	b.n	8005044 <_puts_r+0x88>
	...

08005068 <puts>:
 8005068:	4b02      	ldr	r3, [pc, #8]	@ (8005074 <puts+0xc>)
 800506a:	4601      	mov	r1, r0
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f7ff bfa5 	b.w	8004fbc <_puts_r>
 8005072:	bf00      	nop
 8005074:	20000018 	.word	0x20000018

08005078 <__sread>:
 8005078:	b510      	push	{r4, lr}
 800507a:	460c      	mov	r4, r1
 800507c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005080:	f000 f90e 	bl	80052a0 <_read_r>
 8005084:	2800      	cmp	r0, #0
 8005086:	bfab      	itete	ge
 8005088:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800508a:	89a3      	ldrhlt	r3, [r4, #12]
 800508c:	181b      	addge	r3, r3, r0
 800508e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005092:	bfac      	ite	ge
 8005094:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005096:	81a3      	strhlt	r3, [r4, #12]
 8005098:	bd10      	pop	{r4, pc}

0800509a <__swrite>:
 800509a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509e:	461f      	mov	r7, r3
 80050a0:	898b      	ldrh	r3, [r1, #12]
 80050a2:	05db      	lsls	r3, r3, #23
 80050a4:	4605      	mov	r5, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	4616      	mov	r6, r2
 80050aa:	d505      	bpl.n	80050b8 <__swrite+0x1e>
 80050ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b0:	2302      	movs	r3, #2
 80050b2:	2200      	movs	r2, #0
 80050b4:	f000 f8e2 	bl	800527c <_lseek_r>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	4632      	mov	r2, r6
 80050c6:	463b      	mov	r3, r7
 80050c8:	4628      	mov	r0, r5
 80050ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ce:	f000 b8f9 	b.w	80052c4 <_write_r>

080050d2 <__sseek>:
 80050d2:	b510      	push	{r4, lr}
 80050d4:	460c      	mov	r4, r1
 80050d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050da:	f000 f8cf 	bl	800527c <_lseek_r>
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	bf15      	itete	ne
 80050e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050ee:	81a3      	strheq	r3, [r4, #12]
 80050f0:	bf18      	it	ne
 80050f2:	81a3      	strhne	r3, [r4, #12]
 80050f4:	bd10      	pop	{r4, pc}

080050f6 <__sclose>:
 80050f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fa:	f000 b8af 	b.w	800525c <_close_r>

080050fe <__swbuf_r>:
 80050fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005100:	460e      	mov	r6, r1
 8005102:	4614      	mov	r4, r2
 8005104:	4605      	mov	r5, r0
 8005106:	b118      	cbz	r0, 8005110 <__swbuf_r+0x12>
 8005108:	6a03      	ldr	r3, [r0, #32]
 800510a:	b90b      	cbnz	r3, 8005110 <__swbuf_r+0x12>
 800510c:	f7ff ff0e 	bl	8004f2c <__sinit>
 8005110:	69a3      	ldr	r3, [r4, #24]
 8005112:	60a3      	str	r3, [r4, #8]
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	071a      	lsls	r2, r3, #28
 8005118:	d501      	bpl.n	800511e <__swbuf_r+0x20>
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	b943      	cbnz	r3, 8005130 <__swbuf_r+0x32>
 800511e:	4621      	mov	r1, r4
 8005120:	4628      	mov	r0, r5
 8005122:	f000 f82b 	bl	800517c <__swsetup_r>
 8005126:	b118      	cbz	r0, 8005130 <__swbuf_r+0x32>
 8005128:	f04f 37ff 	mov.w	r7, #4294967295
 800512c:	4638      	mov	r0, r7
 800512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	6922      	ldr	r2, [r4, #16]
 8005134:	1a98      	subs	r0, r3, r2
 8005136:	6963      	ldr	r3, [r4, #20]
 8005138:	b2f6      	uxtb	r6, r6
 800513a:	4283      	cmp	r3, r0
 800513c:	4637      	mov	r7, r6
 800513e:	dc05      	bgt.n	800514c <__swbuf_r+0x4e>
 8005140:	4621      	mov	r1, r4
 8005142:	4628      	mov	r0, r5
 8005144:	f000 fd48 	bl	8005bd8 <_fflush_r>
 8005148:	2800      	cmp	r0, #0
 800514a:	d1ed      	bne.n	8005128 <__swbuf_r+0x2a>
 800514c:	68a3      	ldr	r3, [r4, #8]
 800514e:	3b01      	subs	r3, #1
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	6022      	str	r2, [r4, #0]
 8005158:	701e      	strb	r6, [r3, #0]
 800515a:	6962      	ldr	r2, [r4, #20]
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	429a      	cmp	r2, r3
 8005160:	d004      	beq.n	800516c <__swbuf_r+0x6e>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	07db      	lsls	r3, r3, #31
 8005166:	d5e1      	bpl.n	800512c <__swbuf_r+0x2e>
 8005168:	2e0a      	cmp	r6, #10
 800516a:	d1df      	bne.n	800512c <__swbuf_r+0x2e>
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 fd32 	bl	8005bd8 <_fflush_r>
 8005174:	2800      	cmp	r0, #0
 8005176:	d0d9      	beq.n	800512c <__swbuf_r+0x2e>
 8005178:	e7d6      	b.n	8005128 <__swbuf_r+0x2a>
	...

0800517c <__swsetup_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4b29      	ldr	r3, [pc, #164]	@ (8005224 <__swsetup_r+0xa8>)
 8005180:	4605      	mov	r5, r0
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	460c      	mov	r4, r1
 8005186:	b118      	cbz	r0, 8005190 <__swsetup_r+0x14>
 8005188:	6a03      	ldr	r3, [r0, #32]
 800518a:	b90b      	cbnz	r3, 8005190 <__swsetup_r+0x14>
 800518c:	f7ff fece 	bl	8004f2c <__sinit>
 8005190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005194:	0719      	lsls	r1, r3, #28
 8005196:	d422      	bmi.n	80051de <__swsetup_r+0x62>
 8005198:	06da      	lsls	r2, r3, #27
 800519a:	d407      	bmi.n	80051ac <__swsetup_r+0x30>
 800519c:	2209      	movs	r2, #9
 800519e:	602a      	str	r2, [r5, #0]
 80051a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	f04f 30ff 	mov.w	r0, #4294967295
 80051aa:	e033      	b.n	8005214 <__swsetup_r+0x98>
 80051ac:	0758      	lsls	r0, r3, #29
 80051ae:	d512      	bpl.n	80051d6 <__swsetup_r+0x5a>
 80051b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051b2:	b141      	cbz	r1, 80051c6 <__swsetup_r+0x4a>
 80051b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051b8:	4299      	cmp	r1, r3
 80051ba:	d002      	beq.n	80051c2 <__swsetup_r+0x46>
 80051bc:	4628      	mov	r0, r5
 80051be:	f000 f8c1 	bl	8005344 <_free_r>
 80051c2:	2300      	movs	r3, #0
 80051c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051cc:	81a3      	strh	r3, [r4, #12]
 80051ce:	2300      	movs	r3, #0
 80051d0:	6063      	str	r3, [r4, #4]
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f043 0308 	orr.w	r3, r3, #8
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	b94b      	cbnz	r3, 80051f6 <__swsetup_r+0x7a>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ec:	d003      	beq.n	80051f6 <__swsetup_r+0x7a>
 80051ee:	4621      	mov	r1, r4
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 fd3f 	bl	8005c74 <__smakebuf_r>
 80051f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051fa:	f013 0201 	ands.w	r2, r3, #1
 80051fe:	d00a      	beq.n	8005216 <__swsetup_r+0x9a>
 8005200:	2200      	movs	r2, #0
 8005202:	60a2      	str	r2, [r4, #8]
 8005204:	6962      	ldr	r2, [r4, #20]
 8005206:	4252      	negs	r2, r2
 8005208:	61a2      	str	r2, [r4, #24]
 800520a:	6922      	ldr	r2, [r4, #16]
 800520c:	b942      	cbnz	r2, 8005220 <__swsetup_r+0xa4>
 800520e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005212:	d1c5      	bne.n	80051a0 <__swsetup_r+0x24>
 8005214:	bd38      	pop	{r3, r4, r5, pc}
 8005216:	0799      	lsls	r1, r3, #30
 8005218:	bf58      	it	pl
 800521a:	6962      	ldrpl	r2, [r4, #20]
 800521c:	60a2      	str	r2, [r4, #8]
 800521e:	e7f4      	b.n	800520a <__swsetup_r+0x8e>
 8005220:	2000      	movs	r0, #0
 8005222:	e7f7      	b.n	8005214 <__swsetup_r+0x98>
 8005224:	20000018 	.word	0x20000018

08005228 <memset>:
 8005228:	4402      	add	r2, r0
 800522a:	4603      	mov	r3, r0
 800522c:	4293      	cmp	r3, r2
 800522e:	d100      	bne.n	8005232 <memset+0xa>
 8005230:	4770      	bx	lr
 8005232:	f803 1b01 	strb.w	r1, [r3], #1
 8005236:	e7f9      	b.n	800522c <memset+0x4>

08005238 <strncmp>:
 8005238:	b510      	push	{r4, lr}
 800523a:	b16a      	cbz	r2, 8005258 <strncmp+0x20>
 800523c:	3901      	subs	r1, #1
 800523e:	1884      	adds	r4, r0, r2
 8005240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005244:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005248:	429a      	cmp	r2, r3
 800524a:	d103      	bne.n	8005254 <strncmp+0x1c>
 800524c:	42a0      	cmp	r0, r4
 800524e:	d001      	beq.n	8005254 <strncmp+0x1c>
 8005250:	2a00      	cmp	r2, #0
 8005252:	d1f5      	bne.n	8005240 <strncmp+0x8>
 8005254:	1ad0      	subs	r0, r2, r3
 8005256:	bd10      	pop	{r4, pc}
 8005258:	4610      	mov	r0, r2
 800525a:	e7fc      	b.n	8005256 <strncmp+0x1e>

0800525c <_close_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4d06      	ldr	r5, [pc, #24]	@ (8005278 <_close_r+0x1c>)
 8005260:	2300      	movs	r3, #0
 8005262:	4604      	mov	r4, r0
 8005264:	4608      	mov	r0, r1
 8005266:	602b      	str	r3, [r5, #0]
 8005268:	f7fb fddd 	bl	8000e26 <_close>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d102      	bne.n	8005276 <_close_r+0x1a>
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	b103      	cbz	r3, 8005276 <_close_r+0x1a>
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	bd38      	pop	{r3, r4, r5, pc}
 8005278:	200003d0 	.word	0x200003d0

0800527c <_lseek_r>:
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	4d07      	ldr	r5, [pc, #28]	@ (800529c <_lseek_r+0x20>)
 8005280:	4604      	mov	r4, r0
 8005282:	4608      	mov	r0, r1
 8005284:	4611      	mov	r1, r2
 8005286:	2200      	movs	r2, #0
 8005288:	602a      	str	r2, [r5, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	f7fb fdf2 	bl	8000e74 <_lseek>
 8005290:	1c43      	adds	r3, r0, #1
 8005292:	d102      	bne.n	800529a <_lseek_r+0x1e>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	b103      	cbz	r3, 800529a <_lseek_r+0x1e>
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	bd38      	pop	{r3, r4, r5, pc}
 800529c:	200003d0 	.word	0x200003d0

080052a0 <_read_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d07      	ldr	r5, [pc, #28]	@ (80052c0 <_read_r+0x20>)
 80052a4:	4604      	mov	r4, r0
 80052a6:	4608      	mov	r0, r1
 80052a8:	4611      	mov	r1, r2
 80052aa:	2200      	movs	r2, #0
 80052ac:	602a      	str	r2, [r5, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f7fb fd80 	bl	8000db4 <_read>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d102      	bne.n	80052be <_read_r+0x1e>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	b103      	cbz	r3, 80052be <_read_r+0x1e>
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	200003d0 	.word	0x200003d0

080052c4 <_write_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d07      	ldr	r5, [pc, #28]	@ (80052e4 <_write_r+0x20>)
 80052c8:	4604      	mov	r4, r0
 80052ca:	4608      	mov	r0, r1
 80052cc:	4611      	mov	r1, r2
 80052ce:	2200      	movs	r2, #0
 80052d0:	602a      	str	r2, [r5, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f7fb fd8b 	bl	8000dee <_write>
 80052d8:	1c43      	adds	r3, r0, #1
 80052da:	d102      	bne.n	80052e2 <_write_r+0x1e>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	b103      	cbz	r3, 80052e2 <_write_r+0x1e>
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
 80052e4:	200003d0 	.word	0x200003d0

080052e8 <__errno>:
 80052e8:	4b01      	ldr	r3, [pc, #4]	@ (80052f0 <__errno+0x8>)
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000018 	.word	0x20000018

080052f4 <__libc_init_array>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	4d0d      	ldr	r5, [pc, #52]	@ (800532c <__libc_init_array+0x38>)
 80052f8:	4c0d      	ldr	r4, [pc, #52]	@ (8005330 <__libc_init_array+0x3c>)
 80052fa:	1b64      	subs	r4, r4, r5
 80052fc:	10a4      	asrs	r4, r4, #2
 80052fe:	2600      	movs	r6, #0
 8005300:	42a6      	cmp	r6, r4
 8005302:	d109      	bne.n	8005318 <__libc_init_array+0x24>
 8005304:	4d0b      	ldr	r5, [pc, #44]	@ (8005334 <__libc_init_array+0x40>)
 8005306:	4c0c      	ldr	r4, [pc, #48]	@ (8005338 <__libc_init_array+0x44>)
 8005308:	f000 fd22 	bl	8005d50 <_init>
 800530c:	1b64      	subs	r4, r4, r5
 800530e:	10a4      	asrs	r4, r4, #2
 8005310:	2600      	movs	r6, #0
 8005312:	42a6      	cmp	r6, r4
 8005314:	d105      	bne.n	8005322 <__libc_init_array+0x2e>
 8005316:	bd70      	pop	{r4, r5, r6, pc}
 8005318:	f855 3b04 	ldr.w	r3, [r5], #4
 800531c:	4798      	blx	r3
 800531e:	3601      	adds	r6, #1
 8005320:	e7ee      	b.n	8005300 <__libc_init_array+0xc>
 8005322:	f855 3b04 	ldr.w	r3, [r5], #4
 8005326:	4798      	blx	r3
 8005328:	3601      	adds	r6, #1
 800532a:	e7f2      	b.n	8005312 <__libc_init_array+0x1e>
 800532c:	08005e18 	.word	0x08005e18
 8005330:	08005e18 	.word	0x08005e18
 8005334:	08005e18 	.word	0x08005e18
 8005338:	08005e1c 	.word	0x08005e1c

0800533c <__retarget_lock_init_recursive>:
 800533c:	4770      	bx	lr

0800533e <__retarget_lock_acquire_recursive>:
 800533e:	4770      	bx	lr

08005340 <__retarget_lock_release_recursive>:
 8005340:	4770      	bx	lr
	...

08005344 <_free_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4605      	mov	r5, r0
 8005348:	2900      	cmp	r1, #0
 800534a:	d041      	beq.n	80053d0 <_free_r+0x8c>
 800534c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005350:	1f0c      	subs	r4, r1, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	bfb8      	it	lt
 8005356:	18e4      	addlt	r4, r4, r3
 8005358:	f000 f8e0 	bl	800551c <__malloc_lock>
 800535c:	4a1d      	ldr	r2, [pc, #116]	@ (80053d4 <_free_r+0x90>)
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	b933      	cbnz	r3, 8005370 <_free_r+0x2c>
 8005362:	6063      	str	r3, [r4, #4]
 8005364:	6014      	str	r4, [r2, #0]
 8005366:	4628      	mov	r0, r5
 8005368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800536c:	f000 b8dc 	b.w	8005528 <__malloc_unlock>
 8005370:	42a3      	cmp	r3, r4
 8005372:	d908      	bls.n	8005386 <_free_r+0x42>
 8005374:	6820      	ldr	r0, [r4, #0]
 8005376:	1821      	adds	r1, r4, r0
 8005378:	428b      	cmp	r3, r1
 800537a:	bf01      	itttt	eq
 800537c:	6819      	ldreq	r1, [r3, #0]
 800537e:	685b      	ldreq	r3, [r3, #4]
 8005380:	1809      	addeq	r1, r1, r0
 8005382:	6021      	streq	r1, [r4, #0]
 8005384:	e7ed      	b.n	8005362 <_free_r+0x1e>
 8005386:	461a      	mov	r2, r3
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	b10b      	cbz	r3, 8005390 <_free_r+0x4c>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d9fa      	bls.n	8005386 <_free_r+0x42>
 8005390:	6811      	ldr	r1, [r2, #0]
 8005392:	1850      	adds	r0, r2, r1
 8005394:	42a0      	cmp	r0, r4
 8005396:	d10b      	bne.n	80053b0 <_free_r+0x6c>
 8005398:	6820      	ldr	r0, [r4, #0]
 800539a:	4401      	add	r1, r0
 800539c:	1850      	adds	r0, r2, r1
 800539e:	4283      	cmp	r3, r0
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	d1e0      	bne.n	8005366 <_free_r+0x22>
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	6053      	str	r3, [r2, #4]
 80053aa:	4408      	add	r0, r1
 80053ac:	6010      	str	r0, [r2, #0]
 80053ae:	e7da      	b.n	8005366 <_free_r+0x22>
 80053b0:	d902      	bls.n	80053b8 <_free_r+0x74>
 80053b2:	230c      	movs	r3, #12
 80053b4:	602b      	str	r3, [r5, #0]
 80053b6:	e7d6      	b.n	8005366 <_free_r+0x22>
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	1821      	adds	r1, r4, r0
 80053bc:	428b      	cmp	r3, r1
 80053be:	bf04      	itt	eq
 80053c0:	6819      	ldreq	r1, [r3, #0]
 80053c2:	685b      	ldreq	r3, [r3, #4]
 80053c4:	6063      	str	r3, [r4, #4]
 80053c6:	bf04      	itt	eq
 80053c8:	1809      	addeq	r1, r1, r0
 80053ca:	6021      	streq	r1, [r4, #0]
 80053cc:	6054      	str	r4, [r2, #4]
 80053ce:	e7ca      	b.n	8005366 <_free_r+0x22>
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
 80053d2:	bf00      	nop
 80053d4:	200003dc 	.word	0x200003dc

080053d8 <sbrk_aligned>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4e0f      	ldr	r6, [pc, #60]	@ (8005418 <sbrk_aligned+0x40>)
 80053dc:	460c      	mov	r4, r1
 80053de:	6831      	ldr	r1, [r6, #0]
 80053e0:	4605      	mov	r5, r0
 80053e2:	b911      	cbnz	r1, 80053ea <sbrk_aligned+0x12>
 80053e4:	f000 fca4 	bl	8005d30 <_sbrk_r>
 80053e8:	6030      	str	r0, [r6, #0]
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 fc9f 	bl	8005d30 <_sbrk_r>
 80053f2:	1c43      	adds	r3, r0, #1
 80053f4:	d103      	bne.n	80053fe <sbrk_aligned+0x26>
 80053f6:	f04f 34ff 	mov.w	r4, #4294967295
 80053fa:	4620      	mov	r0, r4
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	1cc4      	adds	r4, r0, #3
 8005400:	f024 0403 	bic.w	r4, r4, #3
 8005404:	42a0      	cmp	r0, r4
 8005406:	d0f8      	beq.n	80053fa <sbrk_aligned+0x22>
 8005408:	1a21      	subs	r1, r4, r0
 800540a:	4628      	mov	r0, r5
 800540c:	f000 fc90 	bl	8005d30 <_sbrk_r>
 8005410:	3001      	adds	r0, #1
 8005412:	d1f2      	bne.n	80053fa <sbrk_aligned+0x22>
 8005414:	e7ef      	b.n	80053f6 <sbrk_aligned+0x1e>
 8005416:	bf00      	nop
 8005418:	200003d8 	.word	0x200003d8

0800541c <_malloc_r>:
 800541c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005420:	1ccd      	adds	r5, r1, #3
 8005422:	f025 0503 	bic.w	r5, r5, #3
 8005426:	3508      	adds	r5, #8
 8005428:	2d0c      	cmp	r5, #12
 800542a:	bf38      	it	cc
 800542c:	250c      	movcc	r5, #12
 800542e:	2d00      	cmp	r5, #0
 8005430:	4606      	mov	r6, r0
 8005432:	db01      	blt.n	8005438 <_malloc_r+0x1c>
 8005434:	42a9      	cmp	r1, r5
 8005436:	d904      	bls.n	8005442 <_malloc_r+0x26>
 8005438:	230c      	movs	r3, #12
 800543a:	6033      	str	r3, [r6, #0]
 800543c:	2000      	movs	r0, #0
 800543e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005518 <_malloc_r+0xfc>
 8005446:	f000 f869 	bl	800551c <__malloc_lock>
 800544a:	f8d8 3000 	ldr.w	r3, [r8]
 800544e:	461c      	mov	r4, r3
 8005450:	bb44      	cbnz	r4, 80054a4 <_malloc_r+0x88>
 8005452:	4629      	mov	r1, r5
 8005454:	4630      	mov	r0, r6
 8005456:	f7ff ffbf 	bl	80053d8 <sbrk_aligned>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	4604      	mov	r4, r0
 800545e:	d158      	bne.n	8005512 <_malloc_r+0xf6>
 8005460:	f8d8 4000 	ldr.w	r4, [r8]
 8005464:	4627      	mov	r7, r4
 8005466:	2f00      	cmp	r7, #0
 8005468:	d143      	bne.n	80054f2 <_malloc_r+0xd6>
 800546a:	2c00      	cmp	r4, #0
 800546c:	d04b      	beq.n	8005506 <_malloc_r+0xea>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	4639      	mov	r1, r7
 8005472:	4630      	mov	r0, r6
 8005474:	eb04 0903 	add.w	r9, r4, r3
 8005478:	f000 fc5a 	bl	8005d30 <_sbrk_r>
 800547c:	4581      	cmp	r9, r0
 800547e:	d142      	bne.n	8005506 <_malloc_r+0xea>
 8005480:	6821      	ldr	r1, [r4, #0]
 8005482:	1a6d      	subs	r5, r5, r1
 8005484:	4629      	mov	r1, r5
 8005486:	4630      	mov	r0, r6
 8005488:	f7ff ffa6 	bl	80053d8 <sbrk_aligned>
 800548c:	3001      	adds	r0, #1
 800548e:	d03a      	beq.n	8005506 <_malloc_r+0xea>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	442b      	add	r3, r5
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	f8d8 3000 	ldr.w	r3, [r8]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	bb62      	cbnz	r2, 80054f8 <_malloc_r+0xdc>
 800549e:	f8c8 7000 	str.w	r7, [r8]
 80054a2:	e00f      	b.n	80054c4 <_malloc_r+0xa8>
 80054a4:	6822      	ldr	r2, [r4, #0]
 80054a6:	1b52      	subs	r2, r2, r5
 80054a8:	d420      	bmi.n	80054ec <_malloc_r+0xd0>
 80054aa:	2a0b      	cmp	r2, #11
 80054ac:	d917      	bls.n	80054de <_malloc_r+0xc2>
 80054ae:	1961      	adds	r1, r4, r5
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	6025      	str	r5, [r4, #0]
 80054b4:	bf18      	it	ne
 80054b6:	6059      	strne	r1, [r3, #4]
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	bf08      	it	eq
 80054bc:	f8c8 1000 	streq.w	r1, [r8]
 80054c0:	5162      	str	r2, [r4, r5]
 80054c2:	604b      	str	r3, [r1, #4]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f82f 	bl	8005528 <__malloc_unlock>
 80054ca:	f104 000b 	add.w	r0, r4, #11
 80054ce:	1d23      	adds	r3, r4, #4
 80054d0:	f020 0007 	bic.w	r0, r0, #7
 80054d4:	1ac2      	subs	r2, r0, r3
 80054d6:	bf1c      	itt	ne
 80054d8:	1a1b      	subne	r3, r3, r0
 80054da:	50a3      	strne	r3, [r4, r2]
 80054dc:	e7af      	b.n	800543e <_malloc_r+0x22>
 80054de:	6862      	ldr	r2, [r4, #4]
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	bf0c      	ite	eq
 80054e4:	f8c8 2000 	streq.w	r2, [r8]
 80054e8:	605a      	strne	r2, [r3, #4]
 80054ea:	e7eb      	b.n	80054c4 <_malloc_r+0xa8>
 80054ec:	4623      	mov	r3, r4
 80054ee:	6864      	ldr	r4, [r4, #4]
 80054f0:	e7ae      	b.n	8005450 <_malloc_r+0x34>
 80054f2:	463c      	mov	r4, r7
 80054f4:	687f      	ldr	r7, [r7, #4]
 80054f6:	e7b6      	b.n	8005466 <_malloc_r+0x4a>
 80054f8:	461a      	mov	r2, r3
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	d1fb      	bne.n	80054f8 <_malloc_r+0xdc>
 8005500:	2300      	movs	r3, #0
 8005502:	6053      	str	r3, [r2, #4]
 8005504:	e7de      	b.n	80054c4 <_malloc_r+0xa8>
 8005506:	230c      	movs	r3, #12
 8005508:	6033      	str	r3, [r6, #0]
 800550a:	4630      	mov	r0, r6
 800550c:	f000 f80c 	bl	8005528 <__malloc_unlock>
 8005510:	e794      	b.n	800543c <_malloc_r+0x20>
 8005512:	6005      	str	r5, [r0, #0]
 8005514:	e7d6      	b.n	80054c4 <_malloc_r+0xa8>
 8005516:	bf00      	nop
 8005518:	200003dc 	.word	0x200003dc

0800551c <__malloc_lock>:
 800551c:	4801      	ldr	r0, [pc, #4]	@ (8005524 <__malloc_lock+0x8>)
 800551e:	f7ff bf0e 	b.w	800533e <__retarget_lock_acquire_recursive>
 8005522:	bf00      	nop
 8005524:	200003d4 	.word	0x200003d4

08005528 <__malloc_unlock>:
 8005528:	4801      	ldr	r0, [pc, #4]	@ (8005530 <__malloc_unlock+0x8>)
 800552a:	f7ff bf09 	b.w	8005340 <__retarget_lock_release_recursive>
 800552e:	bf00      	nop
 8005530:	200003d4 	.word	0x200003d4

08005534 <__sfputc_r>:
 8005534:	6893      	ldr	r3, [r2, #8]
 8005536:	3b01      	subs	r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	b410      	push	{r4}
 800553c:	6093      	str	r3, [r2, #8]
 800553e:	da08      	bge.n	8005552 <__sfputc_r+0x1e>
 8005540:	6994      	ldr	r4, [r2, #24]
 8005542:	42a3      	cmp	r3, r4
 8005544:	db01      	blt.n	800554a <__sfputc_r+0x16>
 8005546:	290a      	cmp	r1, #10
 8005548:	d103      	bne.n	8005552 <__sfputc_r+0x1e>
 800554a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554e:	f7ff bdd6 	b.w	80050fe <__swbuf_r>
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	1c58      	adds	r0, r3, #1
 8005556:	6010      	str	r0, [r2, #0]
 8005558:	7019      	strb	r1, [r3, #0]
 800555a:	4608      	mov	r0, r1
 800555c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005560:	4770      	bx	lr

08005562 <__sfputs_r>:
 8005562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005564:	4606      	mov	r6, r0
 8005566:	460f      	mov	r7, r1
 8005568:	4614      	mov	r4, r2
 800556a:	18d5      	adds	r5, r2, r3
 800556c:	42ac      	cmp	r4, r5
 800556e:	d101      	bne.n	8005574 <__sfputs_r+0x12>
 8005570:	2000      	movs	r0, #0
 8005572:	e007      	b.n	8005584 <__sfputs_r+0x22>
 8005574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005578:	463a      	mov	r2, r7
 800557a:	4630      	mov	r0, r6
 800557c:	f7ff ffda 	bl	8005534 <__sfputc_r>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d1f3      	bne.n	800556c <__sfputs_r+0xa>
 8005584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005588 <_vfiprintf_r>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	460d      	mov	r5, r1
 800558e:	b09d      	sub	sp, #116	@ 0x74
 8005590:	4614      	mov	r4, r2
 8005592:	4698      	mov	r8, r3
 8005594:	4606      	mov	r6, r0
 8005596:	b118      	cbz	r0, 80055a0 <_vfiprintf_r+0x18>
 8005598:	6a03      	ldr	r3, [r0, #32]
 800559a:	b90b      	cbnz	r3, 80055a0 <_vfiprintf_r+0x18>
 800559c:	f7ff fcc6 	bl	8004f2c <__sinit>
 80055a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055a2:	07d9      	lsls	r1, r3, #31
 80055a4:	d405      	bmi.n	80055b2 <_vfiprintf_r+0x2a>
 80055a6:	89ab      	ldrh	r3, [r5, #12]
 80055a8:	059a      	lsls	r2, r3, #22
 80055aa:	d402      	bmi.n	80055b2 <_vfiprintf_r+0x2a>
 80055ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055ae:	f7ff fec6 	bl	800533e <__retarget_lock_acquire_recursive>
 80055b2:	89ab      	ldrh	r3, [r5, #12]
 80055b4:	071b      	lsls	r3, r3, #28
 80055b6:	d501      	bpl.n	80055bc <_vfiprintf_r+0x34>
 80055b8:	692b      	ldr	r3, [r5, #16]
 80055ba:	b99b      	cbnz	r3, 80055e4 <_vfiprintf_r+0x5c>
 80055bc:	4629      	mov	r1, r5
 80055be:	4630      	mov	r0, r6
 80055c0:	f7ff fddc 	bl	800517c <__swsetup_r>
 80055c4:	b170      	cbz	r0, 80055e4 <_vfiprintf_r+0x5c>
 80055c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055c8:	07dc      	lsls	r4, r3, #31
 80055ca:	d504      	bpl.n	80055d6 <_vfiprintf_r+0x4e>
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
 80055d0:	b01d      	add	sp, #116	@ 0x74
 80055d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d6:	89ab      	ldrh	r3, [r5, #12]
 80055d8:	0598      	lsls	r0, r3, #22
 80055da:	d4f7      	bmi.n	80055cc <_vfiprintf_r+0x44>
 80055dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055de:	f7ff feaf 	bl	8005340 <__retarget_lock_release_recursive>
 80055e2:	e7f3      	b.n	80055cc <_vfiprintf_r+0x44>
 80055e4:	2300      	movs	r3, #0
 80055e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80055e8:	2320      	movs	r3, #32
 80055ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80055f2:	2330      	movs	r3, #48	@ 0x30
 80055f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80057a4 <_vfiprintf_r+0x21c>
 80055f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055fc:	f04f 0901 	mov.w	r9, #1
 8005600:	4623      	mov	r3, r4
 8005602:	469a      	mov	sl, r3
 8005604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005608:	b10a      	cbz	r2, 800560e <_vfiprintf_r+0x86>
 800560a:	2a25      	cmp	r2, #37	@ 0x25
 800560c:	d1f9      	bne.n	8005602 <_vfiprintf_r+0x7a>
 800560e:	ebba 0b04 	subs.w	fp, sl, r4
 8005612:	d00b      	beq.n	800562c <_vfiprintf_r+0xa4>
 8005614:	465b      	mov	r3, fp
 8005616:	4622      	mov	r2, r4
 8005618:	4629      	mov	r1, r5
 800561a:	4630      	mov	r0, r6
 800561c:	f7ff ffa1 	bl	8005562 <__sfputs_r>
 8005620:	3001      	adds	r0, #1
 8005622:	f000 80a7 	beq.w	8005774 <_vfiprintf_r+0x1ec>
 8005626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005628:	445a      	add	r2, fp
 800562a:	9209      	str	r2, [sp, #36]	@ 0x24
 800562c:	f89a 3000 	ldrb.w	r3, [sl]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 809f 	beq.w	8005774 <_vfiprintf_r+0x1ec>
 8005636:	2300      	movs	r3, #0
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005640:	f10a 0a01 	add.w	sl, sl, #1
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	9307      	str	r3, [sp, #28]
 8005648:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800564c:	931a      	str	r3, [sp, #104]	@ 0x68
 800564e:	4654      	mov	r4, sl
 8005650:	2205      	movs	r2, #5
 8005652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005656:	4853      	ldr	r0, [pc, #332]	@ (80057a4 <_vfiprintf_r+0x21c>)
 8005658:	f7fa fdc2 	bl	80001e0 <memchr>
 800565c:	9a04      	ldr	r2, [sp, #16]
 800565e:	b9d8      	cbnz	r0, 8005698 <_vfiprintf_r+0x110>
 8005660:	06d1      	lsls	r1, r2, #27
 8005662:	bf44      	itt	mi
 8005664:	2320      	movmi	r3, #32
 8005666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800566a:	0713      	lsls	r3, r2, #28
 800566c:	bf44      	itt	mi
 800566e:	232b      	movmi	r3, #43	@ 0x2b
 8005670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005674:	f89a 3000 	ldrb.w	r3, [sl]
 8005678:	2b2a      	cmp	r3, #42	@ 0x2a
 800567a:	d015      	beq.n	80056a8 <_vfiprintf_r+0x120>
 800567c:	9a07      	ldr	r2, [sp, #28]
 800567e:	4654      	mov	r4, sl
 8005680:	2000      	movs	r0, #0
 8005682:	f04f 0c0a 	mov.w	ip, #10
 8005686:	4621      	mov	r1, r4
 8005688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800568c:	3b30      	subs	r3, #48	@ 0x30
 800568e:	2b09      	cmp	r3, #9
 8005690:	d94b      	bls.n	800572a <_vfiprintf_r+0x1a2>
 8005692:	b1b0      	cbz	r0, 80056c2 <_vfiprintf_r+0x13a>
 8005694:	9207      	str	r2, [sp, #28]
 8005696:	e014      	b.n	80056c2 <_vfiprintf_r+0x13a>
 8005698:	eba0 0308 	sub.w	r3, r0, r8
 800569c:	fa09 f303 	lsl.w	r3, r9, r3
 80056a0:	4313      	orrs	r3, r2
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	46a2      	mov	sl, r4
 80056a6:	e7d2      	b.n	800564e <_vfiprintf_r+0xc6>
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	1d19      	adds	r1, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	9103      	str	r1, [sp, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bfbb      	ittet	lt
 80056b4:	425b      	neglt	r3, r3
 80056b6:	f042 0202 	orrlt.w	r2, r2, #2
 80056ba:	9307      	strge	r3, [sp, #28]
 80056bc:	9307      	strlt	r3, [sp, #28]
 80056be:	bfb8      	it	lt
 80056c0:	9204      	strlt	r2, [sp, #16]
 80056c2:	7823      	ldrb	r3, [r4, #0]
 80056c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80056c6:	d10a      	bne.n	80056de <_vfiprintf_r+0x156>
 80056c8:	7863      	ldrb	r3, [r4, #1]
 80056ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80056cc:	d132      	bne.n	8005734 <_vfiprintf_r+0x1ac>
 80056ce:	9b03      	ldr	r3, [sp, #12]
 80056d0:	1d1a      	adds	r2, r3, #4
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	9203      	str	r2, [sp, #12]
 80056d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056da:	3402      	adds	r4, #2
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80057b4 <_vfiprintf_r+0x22c>
 80056e2:	7821      	ldrb	r1, [r4, #0]
 80056e4:	2203      	movs	r2, #3
 80056e6:	4650      	mov	r0, sl
 80056e8:	f7fa fd7a 	bl	80001e0 <memchr>
 80056ec:	b138      	cbz	r0, 80056fe <_vfiprintf_r+0x176>
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	eba0 000a 	sub.w	r0, r0, sl
 80056f4:	2240      	movs	r2, #64	@ 0x40
 80056f6:	4082      	lsls	r2, r0
 80056f8:	4313      	orrs	r3, r2
 80056fa:	3401      	adds	r4, #1
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005702:	4829      	ldr	r0, [pc, #164]	@ (80057a8 <_vfiprintf_r+0x220>)
 8005704:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005708:	2206      	movs	r2, #6
 800570a:	f7fa fd69 	bl	80001e0 <memchr>
 800570e:	2800      	cmp	r0, #0
 8005710:	d03f      	beq.n	8005792 <_vfiprintf_r+0x20a>
 8005712:	4b26      	ldr	r3, [pc, #152]	@ (80057ac <_vfiprintf_r+0x224>)
 8005714:	bb1b      	cbnz	r3, 800575e <_vfiprintf_r+0x1d6>
 8005716:	9b03      	ldr	r3, [sp, #12]
 8005718:	3307      	adds	r3, #7
 800571a:	f023 0307 	bic.w	r3, r3, #7
 800571e:	3308      	adds	r3, #8
 8005720:	9303      	str	r3, [sp, #12]
 8005722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005724:	443b      	add	r3, r7
 8005726:	9309      	str	r3, [sp, #36]	@ 0x24
 8005728:	e76a      	b.n	8005600 <_vfiprintf_r+0x78>
 800572a:	fb0c 3202 	mla	r2, ip, r2, r3
 800572e:	460c      	mov	r4, r1
 8005730:	2001      	movs	r0, #1
 8005732:	e7a8      	b.n	8005686 <_vfiprintf_r+0xfe>
 8005734:	2300      	movs	r3, #0
 8005736:	3401      	adds	r4, #1
 8005738:	9305      	str	r3, [sp, #20]
 800573a:	4619      	mov	r1, r3
 800573c:	f04f 0c0a 	mov.w	ip, #10
 8005740:	4620      	mov	r0, r4
 8005742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005746:	3a30      	subs	r2, #48	@ 0x30
 8005748:	2a09      	cmp	r2, #9
 800574a:	d903      	bls.n	8005754 <_vfiprintf_r+0x1cc>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0c6      	beq.n	80056de <_vfiprintf_r+0x156>
 8005750:	9105      	str	r1, [sp, #20]
 8005752:	e7c4      	b.n	80056de <_vfiprintf_r+0x156>
 8005754:	fb0c 2101 	mla	r1, ip, r1, r2
 8005758:	4604      	mov	r4, r0
 800575a:	2301      	movs	r3, #1
 800575c:	e7f0      	b.n	8005740 <_vfiprintf_r+0x1b8>
 800575e:	ab03      	add	r3, sp, #12
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	462a      	mov	r2, r5
 8005764:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <_vfiprintf_r+0x228>)
 8005766:	a904      	add	r1, sp, #16
 8005768:	4630      	mov	r0, r6
 800576a:	f3af 8000 	nop.w
 800576e:	4607      	mov	r7, r0
 8005770:	1c78      	adds	r0, r7, #1
 8005772:	d1d6      	bne.n	8005722 <_vfiprintf_r+0x19a>
 8005774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005776:	07d9      	lsls	r1, r3, #31
 8005778:	d405      	bmi.n	8005786 <_vfiprintf_r+0x1fe>
 800577a:	89ab      	ldrh	r3, [r5, #12]
 800577c:	059a      	lsls	r2, r3, #22
 800577e:	d402      	bmi.n	8005786 <_vfiprintf_r+0x1fe>
 8005780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005782:	f7ff fddd 	bl	8005340 <__retarget_lock_release_recursive>
 8005786:	89ab      	ldrh	r3, [r5, #12]
 8005788:	065b      	lsls	r3, r3, #25
 800578a:	f53f af1f 	bmi.w	80055cc <_vfiprintf_r+0x44>
 800578e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005790:	e71e      	b.n	80055d0 <_vfiprintf_r+0x48>
 8005792:	ab03      	add	r3, sp, #12
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	462a      	mov	r2, r5
 8005798:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <_vfiprintf_r+0x228>)
 800579a:	a904      	add	r1, sp, #16
 800579c:	4630      	mov	r0, r6
 800579e:	f000 f879 	bl	8005894 <_printf_i>
 80057a2:	e7e4      	b.n	800576e <_vfiprintf_r+0x1e6>
 80057a4:	08005ddc 	.word	0x08005ddc
 80057a8:	08005de6 	.word	0x08005de6
 80057ac:	00000000 	.word	0x00000000
 80057b0:	08005563 	.word	0x08005563
 80057b4:	08005de2 	.word	0x08005de2

080057b8 <_printf_common>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	4616      	mov	r6, r2
 80057be:	4698      	mov	r8, r3
 80057c0:	688a      	ldr	r2, [r1, #8]
 80057c2:	690b      	ldr	r3, [r1, #16]
 80057c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057c8:	4293      	cmp	r3, r2
 80057ca:	bfb8      	it	lt
 80057cc:	4613      	movlt	r3, r2
 80057ce:	6033      	str	r3, [r6, #0]
 80057d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057d4:	4607      	mov	r7, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	b10a      	cbz	r2, 80057de <_printf_common+0x26>
 80057da:	3301      	adds	r3, #1
 80057dc:	6033      	str	r3, [r6, #0]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	0699      	lsls	r1, r3, #26
 80057e2:	bf42      	ittt	mi
 80057e4:	6833      	ldrmi	r3, [r6, #0]
 80057e6:	3302      	addmi	r3, #2
 80057e8:	6033      	strmi	r3, [r6, #0]
 80057ea:	6825      	ldr	r5, [r4, #0]
 80057ec:	f015 0506 	ands.w	r5, r5, #6
 80057f0:	d106      	bne.n	8005800 <_printf_common+0x48>
 80057f2:	f104 0a19 	add.w	sl, r4, #25
 80057f6:	68e3      	ldr	r3, [r4, #12]
 80057f8:	6832      	ldr	r2, [r6, #0]
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	dc26      	bgt.n	800584e <_printf_common+0x96>
 8005800:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	3b00      	subs	r3, #0
 8005808:	bf18      	it	ne
 800580a:	2301      	movne	r3, #1
 800580c:	0692      	lsls	r2, r2, #26
 800580e:	d42b      	bmi.n	8005868 <_printf_common+0xb0>
 8005810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005814:	4641      	mov	r1, r8
 8005816:	4638      	mov	r0, r7
 8005818:	47c8      	blx	r9
 800581a:	3001      	adds	r0, #1
 800581c:	d01e      	beq.n	800585c <_printf_common+0xa4>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	6922      	ldr	r2, [r4, #16]
 8005822:	f003 0306 	and.w	r3, r3, #6
 8005826:	2b04      	cmp	r3, #4
 8005828:	bf02      	ittt	eq
 800582a:	68e5      	ldreq	r5, [r4, #12]
 800582c:	6833      	ldreq	r3, [r6, #0]
 800582e:	1aed      	subeq	r5, r5, r3
 8005830:	68a3      	ldr	r3, [r4, #8]
 8005832:	bf0c      	ite	eq
 8005834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005838:	2500      	movne	r5, #0
 800583a:	4293      	cmp	r3, r2
 800583c:	bfc4      	itt	gt
 800583e:	1a9b      	subgt	r3, r3, r2
 8005840:	18ed      	addgt	r5, r5, r3
 8005842:	2600      	movs	r6, #0
 8005844:	341a      	adds	r4, #26
 8005846:	42b5      	cmp	r5, r6
 8005848:	d11a      	bne.n	8005880 <_printf_common+0xc8>
 800584a:	2000      	movs	r0, #0
 800584c:	e008      	b.n	8005860 <_printf_common+0xa8>
 800584e:	2301      	movs	r3, #1
 8005850:	4652      	mov	r2, sl
 8005852:	4641      	mov	r1, r8
 8005854:	4638      	mov	r0, r7
 8005856:	47c8      	blx	r9
 8005858:	3001      	adds	r0, #1
 800585a:	d103      	bne.n	8005864 <_printf_common+0xac>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	3501      	adds	r5, #1
 8005866:	e7c6      	b.n	80057f6 <_printf_common+0x3e>
 8005868:	18e1      	adds	r1, r4, r3
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	2030      	movs	r0, #48	@ 0x30
 800586e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005872:	4422      	add	r2, r4
 8005874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005878:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800587c:	3302      	adds	r3, #2
 800587e:	e7c7      	b.n	8005810 <_printf_common+0x58>
 8005880:	2301      	movs	r3, #1
 8005882:	4622      	mov	r2, r4
 8005884:	4641      	mov	r1, r8
 8005886:	4638      	mov	r0, r7
 8005888:	47c8      	blx	r9
 800588a:	3001      	adds	r0, #1
 800588c:	d0e6      	beq.n	800585c <_printf_common+0xa4>
 800588e:	3601      	adds	r6, #1
 8005890:	e7d9      	b.n	8005846 <_printf_common+0x8e>
	...

08005894 <_printf_i>:
 8005894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	7e0f      	ldrb	r7, [r1, #24]
 800589a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800589c:	2f78      	cmp	r7, #120	@ 0x78
 800589e:	4691      	mov	r9, r2
 80058a0:	4680      	mov	r8, r0
 80058a2:	460c      	mov	r4, r1
 80058a4:	469a      	mov	sl, r3
 80058a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058aa:	d807      	bhi.n	80058bc <_printf_i+0x28>
 80058ac:	2f62      	cmp	r7, #98	@ 0x62
 80058ae:	d80a      	bhi.n	80058c6 <_printf_i+0x32>
 80058b0:	2f00      	cmp	r7, #0
 80058b2:	f000 80d1 	beq.w	8005a58 <_printf_i+0x1c4>
 80058b6:	2f58      	cmp	r7, #88	@ 0x58
 80058b8:	f000 80b8 	beq.w	8005a2c <_printf_i+0x198>
 80058bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058c4:	e03a      	b.n	800593c <_printf_i+0xa8>
 80058c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058ca:	2b15      	cmp	r3, #21
 80058cc:	d8f6      	bhi.n	80058bc <_printf_i+0x28>
 80058ce:	a101      	add	r1, pc, #4	@ (adr r1, 80058d4 <_printf_i+0x40>)
 80058d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058d4:	0800592d 	.word	0x0800592d
 80058d8:	08005941 	.word	0x08005941
 80058dc:	080058bd 	.word	0x080058bd
 80058e0:	080058bd 	.word	0x080058bd
 80058e4:	080058bd 	.word	0x080058bd
 80058e8:	080058bd 	.word	0x080058bd
 80058ec:	08005941 	.word	0x08005941
 80058f0:	080058bd 	.word	0x080058bd
 80058f4:	080058bd 	.word	0x080058bd
 80058f8:	080058bd 	.word	0x080058bd
 80058fc:	080058bd 	.word	0x080058bd
 8005900:	08005a3f 	.word	0x08005a3f
 8005904:	0800596b 	.word	0x0800596b
 8005908:	080059f9 	.word	0x080059f9
 800590c:	080058bd 	.word	0x080058bd
 8005910:	080058bd 	.word	0x080058bd
 8005914:	08005a61 	.word	0x08005a61
 8005918:	080058bd 	.word	0x080058bd
 800591c:	0800596b 	.word	0x0800596b
 8005920:	080058bd 	.word	0x080058bd
 8005924:	080058bd 	.word	0x080058bd
 8005928:	08005a01 	.word	0x08005a01
 800592c:	6833      	ldr	r3, [r6, #0]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6032      	str	r2, [r6, #0]
 8005934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800593c:	2301      	movs	r3, #1
 800593e:	e09c      	b.n	8005a7a <_printf_i+0x1e6>
 8005940:	6833      	ldr	r3, [r6, #0]
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	1d19      	adds	r1, r3, #4
 8005946:	6031      	str	r1, [r6, #0]
 8005948:	0606      	lsls	r6, r0, #24
 800594a:	d501      	bpl.n	8005950 <_printf_i+0xbc>
 800594c:	681d      	ldr	r5, [r3, #0]
 800594e:	e003      	b.n	8005958 <_printf_i+0xc4>
 8005950:	0645      	lsls	r5, r0, #25
 8005952:	d5fb      	bpl.n	800594c <_printf_i+0xb8>
 8005954:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005958:	2d00      	cmp	r5, #0
 800595a:	da03      	bge.n	8005964 <_printf_i+0xd0>
 800595c:	232d      	movs	r3, #45	@ 0x2d
 800595e:	426d      	negs	r5, r5
 8005960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005964:	4858      	ldr	r0, [pc, #352]	@ (8005ac8 <_printf_i+0x234>)
 8005966:	230a      	movs	r3, #10
 8005968:	e011      	b.n	800598e <_printf_i+0xfa>
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	6833      	ldr	r3, [r6, #0]
 800596e:	0608      	lsls	r0, r1, #24
 8005970:	f853 5b04 	ldr.w	r5, [r3], #4
 8005974:	d402      	bmi.n	800597c <_printf_i+0xe8>
 8005976:	0649      	lsls	r1, r1, #25
 8005978:	bf48      	it	mi
 800597a:	b2ad      	uxthmi	r5, r5
 800597c:	2f6f      	cmp	r7, #111	@ 0x6f
 800597e:	4852      	ldr	r0, [pc, #328]	@ (8005ac8 <_printf_i+0x234>)
 8005980:	6033      	str	r3, [r6, #0]
 8005982:	bf14      	ite	ne
 8005984:	230a      	movne	r3, #10
 8005986:	2308      	moveq	r3, #8
 8005988:	2100      	movs	r1, #0
 800598a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800598e:	6866      	ldr	r6, [r4, #4]
 8005990:	60a6      	str	r6, [r4, #8]
 8005992:	2e00      	cmp	r6, #0
 8005994:	db05      	blt.n	80059a2 <_printf_i+0x10e>
 8005996:	6821      	ldr	r1, [r4, #0]
 8005998:	432e      	orrs	r6, r5
 800599a:	f021 0104 	bic.w	r1, r1, #4
 800599e:	6021      	str	r1, [r4, #0]
 80059a0:	d04b      	beq.n	8005a3a <_printf_i+0x1a6>
 80059a2:	4616      	mov	r6, r2
 80059a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80059a8:	fb03 5711 	mls	r7, r3, r1, r5
 80059ac:	5dc7      	ldrb	r7, [r0, r7]
 80059ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059b2:	462f      	mov	r7, r5
 80059b4:	42bb      	cmp	r3, r7
 80059b6:	460d      	mov	r5, r1
 80059b8:	d9f4      	bls.n	80059a4 <_printf_i+0x110>
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d10b      	bne.n	80059d6 <_printf_i+0x142>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	07df      	lsls	r7, r3, #31
 80059c2:	d508      	bpl.n	80059d6 <_printf_i+0x142>
 80059c4:	6923      	ldr	r3, [r4, #16]
 80059c6:	6861      	ldr	r1, [r4, #4]
 80059c8:	4299      	cmp	r1, r3
 80059ca:	bfde      	ittt	le
 80059cc:	2330      	movle	r3, #48	@ 0x30
 80059ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059d6:	1b92      	subs	r2, r2, r6
 80059d8:	6122      	str	r2, [r4, #16]
 80059da:	f8cd a000 	str.w	sl, [sp]
 80059de:	464b      	mov	r3, r9
 80059e0:	aa03      	add	r2, sp, #12
 80059e2:	4621      	mov	r1, r4
 80059e4:	4640      	mov	r0, r8
 80059e6:	f7ff fee7 	bl	80057b8 <_printf_common>
 80059ea:	3001      	adds	r0, #1
 80059ec:	d14a      	bne.n	8005a84 <_printf_i+0x1f0>
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	b004      	add	sp, #16
 80059f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	f043 0320 	orr.w	r3, r3, #32
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	4832      	ldr	r0, [pc, #200]	@ (8005acc <_printf_i+0x238>)
 8005a02:	2778      	movs	r7, #120	@ 0x78
 8005a04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	6831      	ldr	r1, [r6, #0]
 8005a0c:	061f      	lsls	r7, r3, #24
 8005a0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a12:	d402      	bmi.n	8005a1a <_printf_i+0x186>
 8005a14:	065f      	lsls	r7, r3, #25
 8005a16:	bf48      	it	mi
 8005a18:	b2ad      	uxthmi	r5, r5
 8005a1a:	6031      	str	r1, [r6, #0]
 8005a1c:	07d9      	lsls	r1, r3, #31
 8005a1e:	bf44      	itt	mi
 8005a20:	f043 0320 	orrmi.w	r3, r3, #32
 8005a24:	6023      	strmi	r3, [r4, #0]
 8005a26:	b11d      	cbz	r5, 8005a30 <_printf_i+0x19c>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	e7ad      	b.n	8005988 <_printf_i+0xf4>
 8005a2c:	4826      	ldr	r0, [pc, #152]	@ (8005ac8 <_printf_i+0x234>)
 8005a2e:	e7e9      	b.n	8005a04 <_printf_i+0x170>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	f023 0320 	bic.w	r3, r3, #32
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	e7f6      	b.n	8005a28 <_printf_i+0x194>
 8005a3a:	4616      	mov	r6, r2
 8005a3c:	e7bd      	b.n	80059ba <_printf_i+0x126>
 8005a3e:	6833      	ldr	r3, [r6, #0]
 8005a40:	6825      	ldr	r5, [r4, #0]
 8005a42:	6961      	ldr	r1, [r4, #20]
 8005a44:	1d18      	adds	r0, r3, #4
 8005a46:	6030      	str	r0, [r6, #0]
 8005a48:	062e      	lsls	r6, r5, #24
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	d501      	bpl.n	8005a52 <_printf_i+0x1be>
 8005a4e:	6019      	str	r1, [r3, #0]
 8005a50:	e002      	b.n	8005a58 <_printf_i+0x1c4>
 8005a52:	0668      	lsls	r0, r5, #25
 8005a54:	d5fb      	bpl.n	8005a4e <_printf_i+0x1ba>
 8005a56:	8019      	strh	r1, [r3, #0]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	e7bc      	b.n	80059da <_printf_i+0x146>
 8005a60:	6833      	ldr	r3, [r6, #0]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	6032      	str	r2, [r6, #0]
 8005a66:	681e      	ldr	r6, [r3, #0]
 8005a68:	6862      	ldr	r2, [r4, #4]
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f7fa fbb7 	bl	80001e0 <memchr>
 8005a72:	b108      	cbz	r0, 8005a78 <_printf_i+0x1e4>
 8005a74:	1b80      	subs	r0, r0, r6
 8005a76:	6060      	str	r0, [r4, #4]
 8005a78:	6863      	ldr	r3, [r4, #4]
 8005a7a:	6123      	str	r3, [r4, #16]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a82:	e7aa      	b.n	80059da <_printf_i+0x146>
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	4632      	mov	r2, r6
 8005a88:	4649      	mov	r1, r9
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	47d0      	blx	sl
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d0ad      	beq.n	80059ee <_printf_i+0x15a>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	079b      	lsls	r3, r3, #30
 8005a96:	d413      	bmi.n	8005ac0 <_printf_i+0x22c>
 8005a98:	68e0      	ldr	r0, [r4, #12]
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	4298      	cmp	r0, r3
 8005a9e:	bfb8      	it	lt
 8005aa0:	4618      	movlt	r0, r3
 8005aa2:	e7a6      	b.n	80059f2 <_printf_i+0x15e>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	4632      	mov	r2, r6
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	4640      	mov	r0, r8
 8005aac:	47d0      	blx	sl
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d09d      	beq.n	80059ee <_printf_i+0x15a>
 8005ab2:	3501      	adds	r5, #1
 8005ab4:	68e3      	ldr	r3, [r4, #12]
 8005ab6:	9903      	ldr	r1, [sp, #12]
 8005ab8:	1a5b      	subs	r3, r3, r1
 8005aba:	42ab      	cmp	r3, r5
 8005abc:	dcf2      	bgt.n	8005aa4 <_printf_i+0x210>
 8005abe:	e7eb      	b.n	8005a98 <_printf_i+0x204>
 8005ac0:	2500      	movs	r5, #0
 8005ac2:	f104 0619 	add.w	r6, r4, #25
 8005ac6:	e7f5      	b.n	8005ab4 <_printf_i+0x220>
 8005ac8:	08005ded 	.word	0x08005ded
 8005acc:	08005dfe 	.word	0x08005dfe

08005ad0 <__sflush_r>:
 8005ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad8:	0716      	lsls	r6, r2, #28
 8005ada:	4605      	mov	r5, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	d454      	bmi.n	8005b8a <__sflush_r+0xba>
 8005ae0:	684b      	ldr	r3, [r1, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	dc02      	bgt.n	8005aec <__sflush_r+0x1c>
 8005ae6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	dd48      	ble.n	8005b7e <__sflush_r+0xae>
 8005aec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005aee:	2e00      	cmp	r6, #0
 8005af0:	d045      	beq.n	8005b7e <__sflush_r+0xae>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005af8:	682f      	ldr	r7, [r5, #0]
 8005afa:	6a21      	ldr	r1, [r4, #32]
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	d030      	beq.n	8005b62 <__sflush_r+0x92>
 8005b00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	0759      	lsls	r1, r3, #29
 8005b06:	d505      	bpl.n	8005b14 <__sflush_r+0x44>
 8005b08:	6863      	ldr	r3, [r4, #4]
 8005b0a:	1ad2      	subs	r2, r2, r3
 8005b0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b0e:	b10b      	cbz	r3, 8005b14 <__sflush_r+0x44>
 8005b10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b12:	1ad2      	subs	r2, r2, r3
 8005b14:	2300      	movs	r3, #0
 8005b16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b18:	6a21      	ldr	r1, [r4, #32]
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b0      	blx	r6
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	d106      	bne.n	8005b32 <__sflush_r+0x62>
 8005b24:	6829      	ldr	r1, [r5, #0]
 8005b26:	291d      	cmp	r1, #29
 8005b28:	d82b      	bhi.n	8005b82 <__sflush_r+0xb2>
 8005b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd4 <__sflush_r+0x104>)
 8005b2c:	40ca      	lsrs	r2, r1
 8005b2e:	07d6      	lsls	r6, r2, #31
 8005b30:	d527      	bpl.n	8005b82 <__sflush_r+0xb2>
 8005b32:	2200      	movs	r2, #0
 8005b34:	6062      	str	r2, [r4, #4]
 8005b36:	04d9      	lsls	r1, r3, #19
 8005b38:	6922      	ldr	r2, [r4, #16]
 8005b3a:	6022      	str	r2, [r4, #0]
 8005b3c:	d504      	bpl.n	8005b48 <__sflush_r+0x78>
 8005b3e:	1c42      	adds	r2, r0, #1
 8005b40:	d101      	bne.n	8005b46 <__sflush_r+0x76>
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	b903      	cbnz	r3, 8005b48 <__sflush_r+0x78>
 8005b46:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b4a:	602f      	str	r7, [r5, #0]
 8005b4c:	b1b9      	cbz	r1, 8005b7e <__sflush_r+0xae>
 8005b4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b52:	4299      	cmp	r1, r3
 8005b54:	d002      	beq.n	8005b5c <__sflush_r+0x8c>
 8005b56:	4628      	mov	r0, r5
 8005b58:	f7ff fbf4 	bl	8005344 <_free_r>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b60:	e00d      	b.n	8005b7e <__sflush_r+0xae>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b0      	blx	r6
 8005b68:	4602      	mov	r2, r0
 8005b6a:	1c50      	adds	r0, r2, #1
 8005b6c:	d1c9      	bne.n	8005b02 <__sflush_r+0x32>
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0c6      	beq.n	8005b02 <__sflush_r+0x32>
 8005b74:	2b1d      	cmp	r3, #29
 8005b76:	d001      	beq.n	8005b7c <__sflush_r+0xac>
 8005b78:	2b16      	cmp	r3, #22
 8005b7a:	d11e      	bne.n	8005bba <__sflush_r+0xea>
 8005b7c:	602f      	str	r7, [r5, #0]
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e022      	b.n	8005bc8 <__sflush_r+0xf8>
 8005b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b86:	b21b      	sxth	r3, r3
 8005b88:	e01b      	b.n	8005bc2 <__sflush_r+0xf2>
 8005b8a:	690f      	ldr	r7, [r1, #16]
 8005b8c:	2f00      	cmp	r7, #0
 8005b8e:	d0f6      	beq.n	8005b7e <__sflush_r+0xae>
 8005b90:	0793      	lsls	r3, r2, #30
 8005b92:	680e      	ldr	r6, [r1, #0]
 8005b94:	bf08      	it	eq
 8005b96:	694b      	ldreq	r3, [r1, #20]
 8005b98:	600f      	str	r7, [r1, #0]
 8005b9a:	bf18      	it	ne
 8005b9c:	2300      	movne	r3, #0
 8005b9e:	eba6 0807 	sub.w	r8, r6, r7
 8005ba2:	608b      	str	r3, [r1, #8]
 8005ba4:	f1b8 0f00 	cmp.w	r8, #0
 8005ba8:	dde9      	ble.n	8005b7e <__sflush_r+0xae>
 8005baa:	6a21      	ldr	r1, [r4, #32]
 8005bac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005bae:	4643      	mov	r3, r8
 8005bb0:	463a      	mov	r2, r7
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b0      	blx	r6
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	dc08      	bgt.n	8005bcc <__sflush_r+0xfc>
 8005bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bcc:	4407      	add	r7, r0
 8005bce:	eba8 0800 	sub.w	r8, r8, r0
 8005bd2:	e7e7      	b.n	8005ba4 <__sflush_r+0xd4>
 8005bd4:	20400001 	.word	0x20400001

08005bd8 <_fflush_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	690b      	ldr	r3, [r1, #16]
 8005bdc:	4605      	mov	r5, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	b913      	cbnz	r3, 8005be8 <_fflush_r+0x10>
 8005be2:	2500      	movs	r5, #0
 8005be4:	4628      	mov	r0, r5
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	b118      	cbz	r0, 8005bf2 <_fflush_r+0x1a>
 8005bea:	6a03      	ldr	r3, [r0, #32]
 8005bec:	b90b      	cbnz	r3, 8005bf2 <_fflush_r+0x1a>
 8005bee:	f7ff f99d 	bl	8004f2c <__sinit>
 8005bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f3      	beq.n	8005be2 <_fflush_r+0xa>
 8005bfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bfc:	07d0      	lsls	r0, r2, #31
 8005bfe:	d404      	bmi.n	8005c0a <_fflush_r+0x32>
 8005c00:	0599      	lsls	r1, r3, #22
 8005c02:	d402      	bmi.n	8005c0a <_fflush_r+0x32>
 8005c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c06:	f7ff fb9a 	bl	800533e <__retarget_lock_acquire_recursive>
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	f7ff ff5f 	bl	8005ad0 <__sflush_r>
 8005c12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c14:	07da      	lsls	r2, r3, #31
 8005c16:	4605      	mov	r5, r0
 8005c18:	d4e4      	bmi.n	8005be4 <_fflush_r+0xc>
 8005c1a:	89a3      	ldrh	r3, [r4, #12]
 8005c1c:	059b      	lsls	r3, r3, #22
 8005c1e:	d4e1      	bmi.n	8005be4 <_fflush_r+0xc>
 8005c20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c22:	f7ff fb8d 	bl	8005340 <__retarget_lock_release_recursive>
 8005c26:	e7dd      	b.n	8005be4 <_fflush_r+0xc>

08005c28 <__swhatbuf_r>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c30:	2900      	cmp	r1, #0
 8005c32:	b096      	sub	sp, #88	@ 0x58
 8005c34:	4615      	mov	r5, r2
 8005c36:	461e      	mov	r6, r3
 8005c38:	da0d      	bge.n	8005c56 <__swhatbuf_r+0x2e>
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c40:	f04f 0100 	mov.w	r1, #0
 8005c44:	bf14      	ite	ne
 8005c46:	2340      	movne	r3, #64	@ 0x40
 8005c48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	6031      	str	r1, [r6, #0]
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	b016      	add	sp, #88	@ 0x58
 8005c54:	bd70      	pop	{r4, r5, r6, pc}
 8005c56:	466a      	mov	r2, sp
 8005c58:	f000 f848 	bl	8005cec <_fstat_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	dbec      	blt.n	8005c3a <__swhatbuf_r+0x12>
 8005c60:	9901      	ldr	r1, [sp, #4]
 8005c62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c6a:	4259      	negs	r1, r3
 8005c6c:	4159      	adcs	r1, r3
 8005c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c72:	e7eb      	b.n	8005c4c <__swhatbuf_r+0x24>

08005c74 <__smakebuf_r>:
 8005c74:	898b      	ldrh	r3, [r1, #12]
 8005c76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c78:	079d      	lsls	r5, r3, #30
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	d507      	bpl.n	8005c90 <__smakebuf_r+0x1c>
 8005c80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	6163      	str	r3, [r4, #20]
 8005c8c:	b003      	add	sp, #12
 8005c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c90:	ab01      	add	r3, sp, #4
 8005c92:	466a      	mov	r2, sp
 8005c94:	f7ff ffc8 	bl	8005c28 <__swhatbuf_r>
 8005c98:	9f00      	ldr	r7, [sp, #0]
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f7ff fbbc 	bl	800541c <_malloc_r>
 8005ca4:	b948      	cbnz	r0, 8005cba <__smakebuf_r+0x46>
 8005ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005caa:	059a      	lsls	r2, r3, #22
 8005cac:	d4ee      	bmi.n	8005c8c <__smakebuf_r+0x18>
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	f043 0302 	orr.w	r3, r3, #2
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	e7e2      	b.n	8005c80 <__smakebuf_r+0xc>
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	6020      	str	r0, [r4, #0]
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	9b01      	ldr	r3, [sp, #4]
 8005cc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005cca:	b15b      	cbz	r3, 8005ce4 <__smakebuf_r+0x70>
 8005ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f000 f81d 	bl	8005d10 <_isatty_r>
 8005cd6:	b128      	cbz	r0, 8005ce4 <__smakebuf_r+0x70>
 8005cd8:	89a3      	ldrh	r3, [r4, #12]
 8005cda:	f023 0303 	bic.w	r3, r3, #3
 8005cde:	f043 0301 	orr.w	r3, r3, #1
 8005ce2:	81a3      	strh	r3, [r4, #12]
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	431d      	orrs	r5, r3
 8005ce8:	81a5      	strh	r5, [r4, #12]
 8005cea:	e7cf      	b.n	8005c8c <__smakebuf_r+0x18>

08005cec <_fstat_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d07      	ldr	r5, [pc, #28]	@ (8005d0c <_fstat_r+0x20>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	602b      	str	r3, [r5, #0]
 8005cfa:	f7fb f8a0 	bl	8000e3e <_fstat>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d102      	bne.n	8005d08 <_fstat_r+0x1c>
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	b103      	cbz	r3, 8005d08 <_fstat_r+0x1c>
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200003d0 	.word	0x200003d0

08005d10 <_isatty_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d06      	ldr	r5, [pc, #24]	@ (8005d2c <_isatty_r+0x1c>)
 8005d14:	2300      	movs	r3, #0
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fb f89f 	bl	8000e5e <_isatty>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_isatty_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_isatty_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	200003d0 	.word	0x200003d0

08005d30 <_sbrk_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d06      	ldr	r5, [pc, #24]	@ (8005d4c <_sbrk_r+0x1c>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	602b      	str	r3, [r5, #0]
 8005d3c:	f7fb f8a8 	bl	8000e90 <_sbrk>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_sbrk_r+0x1a>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_sbrk_r+0x1a>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	200003d0 	.word	0x200003d0

08005d50 <_init>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr

08005d5c <_fini>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr
